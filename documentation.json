{
    "pipes": [
        {
            "name": "OrdinalPipe",
            "id": "pipe-OrdinalPipe-28ef33d363dfe3156efc5253136bde10",
            "file": "src/app/components/shared/ordinal-pipe/ordinal.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "int",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "int",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "ordinal",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'ordinal',\r\n})\r\nexport class OrdinalPipe implements PipeTransform {\r\n  transform(int): any {\r\n    const ones = +int % 10;\r\n    const tens = (+int % 100) - ones;\r\n    return int + ['th', 'st', 'nd', 'rd'][tens === 10 || ones > 3 ? 0 : ones];\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [],
    "injectables": [
        {
            "name": "CommonDataService",
            "id": "injectable-CommonDataService-7565542cc7a6701d0e9da30f9e72b15e",
            "file": "src/app/components/shared/common-data-service/common-data.service.ts",
            "properties": [
                {
                    "name": "additionalcovers",
                    "defaultValue": "new BehaviorSubject(this.additionalcoversData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "additionalcoversData",
                    "defaultValue": "{\r\n    cover: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "contactinformation",
                    "defaultValue": "new BehaviorSubject(this.contactinformationData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "contactinformationData",
                    "defaultValue": "{\r\n    No: '',\r\n    appartment: '',\r\n    block: '',\r\n    city: '',\r\n    entrance: '',\r\n    phone: '',\r\n    pincode: '',\r\n    street: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "defaultData",
                    "defaultValue": "{\r\n    coversData: { cover: '' },\r\n    installmentsData: { term: '' },\r\n    insuringPartyData: { egn: '', address: 'mumbai', email: '' },\r\n    policyDetailsData: { policyDate: '', policyLength: '', check1: false, check2: false },\r\n    vehicleData: { registrationNumber: '', certificateNumber: '', purpose: '', yesNo: '' },\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "defaultData2",
                    "defaultValue": "{\r\n    contactInformation: {\r\n      No: '',\r\n      appartment: '',\r\n      block: '',\r\n      city: '',\r\n      entrance: '',\r\n      phone: '',\r\n      pincode: '',\r\n      street: '',\r\n    },\r\n    deliveryInformation: {\r\n      appt: '',\r\n      block: '',\r\n      business: '',\r\n      city: '',\r\n      contact: '',\r\n      entrance: '',\r\n      fullName: '',\r\n      notes: '',\r\n      number: '',\r\n      pincode: '',\r\n      street: '',\r\n    },\r\n    personalInformation: {\r\n      birth: '',\r\n      citizen: '',\r\n      fullname: { firstname: '', lastname: '', surname: '' },\r\n      fullnameeng: { firstnameeng: '', lastnameeng: '', surnameeng: '' },\r\n      lnch: ''\r\n    },\r\n\r\n    vehicleOwnerInformation: {\r\n      fullname: { firstname: '', lastname: '', surname: '' },\r\n      lnch: ''\r\n    }\r\n\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "deliveryinformation",
                    "defaultValue": "new BehaviorSubject(this.deliveryinformationData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "deliveryinformationData",
                    "defaultValue": "{\r\n    appt: '',\r\n    block: '',\r\n    business: '',\r\n    city: '',\r\n    contact: '',\r\n    entrance: '',\r\n    fullName: '',\r\n    notes: '',\r\n    number: '',\r\n    pincode: '',\r\n    street: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "formData",
                    "defaultValue": "new BehaviorSubject<any>(this.defaultData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "installment",
                    "defaultValue": "new BehaviorSubject(this.installmentData1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "installmentData",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "installmentData1",
                    "defaultValue": "{\r\n    term: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "insuringparty",
                    "defaultValue": "new BehaviorSubject(this.insuringpartyData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "insuringpartyData",
                    "defaultValue": "{\r\n    egn: '',\r\n    address: '',\r\n    email: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "personalinformation",
                    "defaultValue": "new BehaviorSubject(this.personalinformationData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "personalinformationData",
                    "defaultValue": "{\r\n    birth: '',\r\n    citizen: '',\r\n    fullname: { firstname: '', lastname: '', surname: '' },\r\n    fullnameeng: { firstnameeng: '', lastnameeng: '', surnameeng: '' },\r\n    lnch: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "policy",
                    "defaultValue": "new BehaviorSubject(this.policyData1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "policyData",
                    "defaultValue": "new BehaviorSubject<any>(this.defaultData2)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "policyData1",
                    "defaultValue": "{\r\n    policyDate: '',\r\n    policyLength: '',\r\n    check1: '',\r\n    check2: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "vehicleinfo",
                    "defaultValue": "new BehaviorSubject(this.vehicleinfoData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "vehicleinfoData",
                    "defaultValue": "{\r\n    registrationNumber: '',\r\n    certificateNumber: '',\r\n    purpose: '',\r\n    yesNo: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "vehicleownerinformation",
                    "defaultValue": "new BehaviorSubject(this.vehicleownerinformationData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "vehicleownerinformationData",
                    "defaultValue": "{\r\n    fullname: { firstname: '', lastname: '', surname: '' },\r\n    lnch: ''\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonDataService {\r\n  defaultData = {\r\n    coversData: { cover: '' },\r\n    installmentsData: { term: '' },\r\n    insuringPartyData: { egn: '', address: 'mumbai', email: '' },\r\n    policyDetailsData: { policyDate: '', policyLength: '', check1: false, check2: false },\r\n    vehicleData: { registrationNumber: '', certificateNumber: '', purpose: '', yesNo: '' },\r\n  };\r\n  defaultData2 = {\r\n    contactInformation: {\r\n      No: '',\r\n      appartment: '',\r\n      block: '',\r\n      city: '',\r\n      entrance: '',\r\n      phone: '',\r\n      pincode: '',\r\n      street: '',\r\n    },\r\n    deliveryInformation: {\r\n      appt: '',\r\n      block: '',\r\n      business: '',\r\n      city: '',\r\n      contact: '',\r\n      entrance: '',\r\n      fullName: '',\r\n      notes: '',\r\n      number: '',\r\n      pincode: '',\r\n      street: '',\r\n    },\r\n    personalInformation: {\r\n      birth: '',\r\n      citizen: '',\r\n      fullname: { firstname: '', lastname: '', surname: '' },\r\n      fullnameeng: { firstnameeng: '', lastnameeng: '', surnameeng: '' },\r\n      lnch: ''\r\n    },\r\n\r\n    vehicleOwnerInformation: {\r\n      fullname: { firstname: '', lastname: '', surname: '' },\r\n      lnch: ''\r\n    }\r\n\r\n  };\r\n  // MTPL-Calculator\r\n  vehicleinfoData = {\r\n    registrationNumber: '',\r\n    certificateNumber: '',\r\n    purpose: '',\r\n    yesNo: ''\r\n  };\r\n  insuringpartyData = {\r\n    egn: '',\r\n    address: '',\r\n    email: ''\r\n  };\r\n  policyData1 = {\r\n    policyDate: '',\r\n    policyLength: '',\r\n    check1: '',\r\n    check2: ''\r\n  };\r\n  installmentData1 = {\r\n    term: ''\r\n  };\r\n  additionalcoversData = {\r\n    cover: ''\r\n  };\r\n  // MTPL-Policy\r\n  contactinformationData = {\r\n    No: '',\r\n    appartment: '',\r\n    block: '',\r\n    city: '',\r\n    entrance: '',\r\n    phone: '',\r\n    pincode: '',\r\n    street: ''\r\n  };\r\n  deliveryinformationData = {\r\n    appt: '',\r\n    block: '',\r\n    business: '',\r\n    city: '',\r\n    contact: '',\r\n    entrance: '',\r\n    fullName: '',\r\n    notes: '',\r\n    number: '',\r\n    pincode: '',\r\n    street: ''\r\n  };\r\n  personalinformationData = {\r\n    birth: '',\r\n    citizen: '',\r\n    fullname: { firstname: '', lastname: '', surname: '' },\r\n    fullnameeng: { firstnameeng: '', lastnameeng: '', surnameeng: '' },\r\n    lnch: ''\r\n  };\r\n  vehicleownerinformationData = {\r\n    fullname: { firstname: '', lastname: '', surname: '' },\r\n    lnch: ''\r\n  };\r\n\r\n  constructor() { }\r\n  formData = new BehaviorSubject<any>(this.defaultData);\r\n  policyData = new BehaviorSubject<any>(this.defaultData2);\r\n  installmentData = new BehaviorSubject<any>('');\r\n\r\n  // MTPL-Calculator\r\n  vehicleinfo = new BehaviorSubject(this.vehicleinfoData);\r\n  insuringparty = new BehaviorSubject(this.insuringpartyData);\r\n  policy = new BehaviorSubject(this.policyData1);\r\n  installment = new BehaviorSubject(this.installmentData1);\r\n  additionalcovers = new BehaviorSubject(this.additionalcoversData);\r\n  // MTPL-Policy\r\n  contactinformation = new BehaviorSubject(this.contactinformationData);\r\n  deliveryinformation = new BehaviorSubject(this.deliveryinformationData);\r\n  personalinformation = new BehaviorSubject(this.personalinformationData);\r\n  vehicleownerinformation = new BehaviorSubject(this.vehicleownerinformationData);\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 111
            },
            "type": "injectable"
        },
        {
            "name": "InstallmentService",
            "id": "injectable-InstallmentService-1083d9a4830cb64f8f119f833f6e7ff3",
            "file": "src/app/components/tab/mtpl-calculator/Steps/installment/installment.service.ts",
            "properties": [
                {
                    "name": "getInstallmentData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "url",
                    "defaultValue": "'http://3.6.39.44:4000/mtpl/getInstallmentOptions'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class InstallmentService {\r\n  constructor(private http: HttpClient) {}\r\n  url = 'http://3.6.39.44:4000/mtpl/getInstallmentOptions';\r\n\r\n  getInstallmentData = () => {\r\n    return this.http.get(this.url);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-177bd9cc3bae4703e9e75a49d981a1e0",
            "file": "src/app/components/login/login.service.ts",
            "properties": [
                {
                    "name": "getLoginData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "url",
                    "defaultValue": "'http://3.6.39.44:4000/user/login'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  constructor(private http: HttpClient) {}\r\n  url = 'http://3.6.39.44:4000/user/login';\r\n  getLoginData = data => {\r\n    return this.http.post(this.url, data);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MtplCalculatorService",
            "id": "injectable-MtplCalculatorService-ee32122b60f1224370ec8fd21d56cfb8",
            "file": "src/app/components/tab/mtpl-calculator/mtpl-calculator.service.ts",
            "properties": [
                {
                    "name": "getData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "geturl",
                    "defaultValue": "'http://3.6.39.44:4000/mtpl/getmtplCalculator'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "postData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "posturl",
                    "defaultValue": "'http://3.6.39.44:4000/mtpl/postmtplCalculator'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MtplCalculatorService {\r\n  constructor(private http: HttpClient) {}\r\n  posturl = 'http://3.6.39.44:4000/mtpl/postmtplCalculator';\r\n  geturl = 'http://3.6.39.44:4000/mtpl/getmtplCalculator';\r\n  postData = data => {\r\n    return this.http.post(this.posturl, data);\r\n  }\r\n  getData = id => {\r\n    return this.http.post(this.geturl, id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MtplPolicyService",
            "id": "injectable-MtplPolicyService-96631e6986509f7ff0a8f37a8eec6ca7",
            "file": "src/app/components/tab/mtpl-policy/mtpl-policy.service.ts",
            "properties": [
                {
                    "name": "getData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "geturl",
                    "defaultValue": "'http://3.6.39.44:4000/mtpl/getPurchasePolicy'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "postData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "posturl",
                    "defaultValue": "'http://3.6.39.44:4000/mtpl/postPurchasePolicy'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MtplPolicyService {\r\n  constructor(private http: HttpClient) {}\r\n  posturl = 'http://3.6.39.44:4000/mtpl/postPurchasePolicy';\r\n  geturl = 'http://3.6.39.44:4000/mtpl/getPurchasePolicy';\r\n  postData = data => {\r\n    return this.http.post(this.posturl, data);\r\n  }\r\n  getData = id => {\r\n    return this.http.post(this.geturl, id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProvincesService",
            "id": "injectable-ProvincesService-ac3f085d73d9acd9eb971af40380fedb",
            "file": "src/app/components/shared/provinces-service/provinces.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'http://3.6.39.44:4000/provinces/getProvincesList'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getProvinces",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<object[]>",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProvincesService {\r\n  constructor(private http: HttpClient) {}\r\n  url = 'http://3.6.39.44:4000/provinces/getProvincesList';\r\n\r\n  getProvinces(): Observable<object[]> {\r\n    return  this.http.get(this.url) as Observable<object[]>;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SignUpService",
            "id": "injectable-SignUpService-ef1547297f6cd52d630493386c347249",
            "file": "src/app/components/sign-up/sign-up.service.ts",
            "properties": [
                {
                    "name": "registerUser",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "url",
                    "defaultValue": "'http://3.6.39.44:4000/user/signup'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignUpService {\r\n  constructor(private http: HttpClient) {}\r\n  url = 'http://3.6.39.44:4000/user/signup';\r\n\r\n  registerUser = userData => {\r\n\r\n    return this.http.post(this.url, userData);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AdditionalCoversComponent",
            "id": "component-AdditionalCoversComponent-5ceb427e7f804c1c10292b2ced813a5a",
            "file": "src/app/components/tab/mtpl-calculator/Steps/additional-covers/additional-covers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-additional-covers",
            "styleUrls": [
                "./additional-covers.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./additional-covers.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "coverSelected",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "installment",
                    "line": 16
                }
            ],
            "outputsClass": [
                {
                    "name": "NextTab",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "additionalcoverForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "imageUrl",
                    "defaultValue": "'./assets/carlogo.jpeg '",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "next",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "tickimage",
                    "defaultValue": "'./assets/tick.jpg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\n\r\n@Component({\r\n  selector: 'app-additional-covers',\r\n  templateUrl: './additional-covers.component.html',\r\n  styleUrls: ['./additional-covers.component.css'],\r\n})\r\nexport class AdditionalCoversComponent implements OnInit {\r\n  @Output() OnToggle = new EventEmitter();\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n  @Output() NextTab = new EventEmitter();\r\n  @Input() coverSelected: string;\r\n  @Input() installment;\r\n  imageUrl = './assets/carlogo.jpeg ';\r\n  tickimage = './assets/tick.jpg';\r\n  additionalcoverForm: FormGroup;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private GAService: GoogleAnalyticsService,\r\n    private commonDataService: CommonDataService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.additionalcoverForm = this.formBuilder.group({\r\n      cover: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  change = () => {\r\n    if (this.additionalcoverForm.valid) {\r\n      this.OnToggle.emit(true);\r\n      this.commonDataService.additionalcovers.next(\r\n        this.additionalcoverForm.value\r\n      );\r\n    } else {\r\n      this.OnToggle.emit(false);\r\n    }\r\n  }\r\n  next = () => {\r\n    this.GAService.event('Next Button clicked', 'Additional Covers', 'Next');\r\n    this.commonDataService.additionalcovers.next(\r\n      this.additionalcoverForm.value\r\n    );\r\n    this.NextTab.emit(1);\r\n    this.OnSubmission.emit('Additional Covers form is submitted!');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".bestvalue1 {\r\n  margin-left: -10px;\r\n  font-size: 15px;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n.mon {\r\n  margin-top: 30px;\r\n  font-size: 15px;\r\n}\r\n.mon1 {\r\n  padding-left: 27px;\r\n  padding-bottom: 10px;\r\n  font-size: 12px;\r\n}\r\n.spc {\r\n  margin-left: 27px;\r\n  width: 100px;\r\n}\r\n.best {\r\n  padding-left: 25px;\r\n  padding-right: 0px;\r\n  font-size: 15px;\r\n  width: 150px;\r\n}\r\n\r\n.heading {\r\n  color: rgb(8, 56, 95);\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  font-weight: bold;\r\n}\r\n.middle-heading {\r\n  display: flex;\r\n  height: 100%;\r\n  align-items: center;\r\n  font-size: 20px;\r\n  padding-left: 20px;\r\n  color: white;\r\n}\r\n.bg-dark-blue {\r\n  background-color: #003564;\r\n  color: #ffffff;\r\n}\r\n.sub-head {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: rgb(8, 56, 95);\r\n}\r\n\r\n.cardrow {\r\n  margin-left: 20px;\r\n  color: rgb(8, 56, 95);\r\n  height: 50px;\r\n}\r\n.nearelm {\r\n  font-size: 20px;\r\n}\r\n.num {\r\n  color: rgb(8, 56, 95);\r\n\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n\r\n  padding: 0%;\r\n}\r\n.months {\r\n  color: rgb(8, 56, 95);\r\n}\r\n.whitecard {\r\n  padding: 0%;\r\n  margin-top: 20px;\r\n}\r\n.firstcard {\r\n  height: auto;\r\n  margin-bottom: 20px;\r\n}\r\n.secondcard {\r\n  height: auto;\r\n  margin-bottom: 20px;\r\n}\r\n.thirdcard {\r\n  height: auto;\r\n  margin-bottom: 20px;\r\n}\r\n.thirdparty {\r\n  background-color: rgb(8, 56, 95);\r\n  height: auto;\r\n  width: 100%;\r\n  margin-bottom: 50px;\r\n}\r\n.policy {\r\n  color: white;\r\n  margin-left: -1px;\r\n  margin-top: -50px;\r\n  font-size: 20px;\r\n}\r\n.bgn {\r\n  color: white;\r\n  padding-left: 10%;\r\n}\r\n.card-body {\r\n  padding-top: 2px;\r\n}\r\n\r\n.textcolor {\r\n  color: rgb(8, 56, 95);\r\n  margin-top: -20px;\r\n  padding-left: 15px;\r\n}\r\n\r\n.car {\r\n  margin-left: -5px;\r\n}\r\n.img {\r\n  width: 60%;\r\n  height: 60%;\r\n  object-fit: contain;\r\n}\r\n\r\n@media screen and (max-width: 450px) {\r\n  .mon2 {\r\n    margin-top: 10px;\r\n    margin-left: -45px;\r\n  }\r\n  .bestvalue {\r\n    margin-top: 25px;\r\n    margin-left: -70px;\r\n    padding-left: 25px;\r\n  }\r\n\r\n  .bgn {\r\n    margin-left: -20px;\r\n    color: white;\r\n  }\r\n  .whitecard .months {\r\n    margin-left: 25px;\r\n  }\r\n  .whitecard .num {\r\n    margin-left: 25px;\r\n  }\r\n  .num1 {\r\n    margin-left: 35px;\r\n    width: 200px;\r\n  }\r\n  .num {\r\n    font-size: 15px;\r\n  }\r\n  .months {\r\n    margin-left: 60px;\r\n    font-size: 15px;\r\n  }\r\n  .nearelm {\r\n    font-size: 15px;\r\n  }\r\n\r\n  .middle-heading1 {\r\n    margin-left: 35px;\r\n    max-width: 500px;\r\n  }\r\n  .middle-heading {\r\n    margin-left: 0px;\r\n    padding-left: 0%;\r\n  }\r\n  .col-lg-12 {\r\n    margin-left: 200px;\r\n  }\r\n  .spc {\r\n    margin-top: 0px;\r\n  }\r\n}\r\n\r\n@media all and (max-width: 767px) and (min-width: 576px) {\r\n  .nearelm {\r\n    font-size: 13px;\r\n  }\r\n  .bgn {\r\n    font-size: 12px;\r\n    text-align: left;\r\n  }\r\n\r\n  .mon1 {\r\n    width: 300px;\r\n    font-size: 12px;\r\n  }\r\n  .num1 {\r\n    margin-left: 40px;\r\n    width: 200px;\r\n  }\r\n\r\n  .months {\r\n    font-size: 12px;\r\n  }\r\n\r\n  /*  .textcolor {\r\n    display: none; \r\n  }*/\r\n  .middle-heading1 {\r\n    margin-left: 5px;\r\n    max-width: 500px;\r\n  }\r\n\r\n  .bestvalue {\r\n    margin-top: 25px;\r\n    padding-left: 25px;\r\n  }\r\n  /* .adjust {\r\n    padding-left: 0%;\r\n    padding-top: 5%;\r\n  } */\r\n  /* .cardrow{\r\n    margin-bottom: 100px;\r\n  \r\n  } */\r\n}\r\n@media screen and (max-width: 575px) and (min-width: 451px) {\r\n  .mon2 {\r\n    margin-left: -45px;\r\n  }\r\n  .bestvalue {\r\n    margin-top: 25px;\r\n    padding-left: 25px;\r\n  }\r\n\r\n  .nextbtn {\r\n    width: 250px;\r\n    margin: auto;\r\n    display: block;\r\n  }\r\n}\r\n",
                    "styleUrl": "./additional-covers.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"heading\">Additional covers</h1>\r\n<br />\r\n<form [formGroup]=\"additionalcoverForm\" (submit)=\"next()\">\r\n  <div fxLayout=\"row wrap\" fxLayoutAlign=\"space-between\">\r\n    <mat-card class=\"mat-elevation-z8 thirdparty\">\r\n      <mat-card-content>\r\n        <div fxLayout=\"row\">\r\n          <div fxFlex=\"15%\">\r\n            <img src=\"../../assets/motor_policy.PNG\" alt=\"motor policy\" />\r\n          </div>\r\n          <div fxFlex=\"80%\">\r\n            <div fxLayout.xs=\"column\" fxLayout=\"row\">\r\n              <div fxFlex=\"70%\" fxLayoutAlign=\"start\" fxFlex.xs=\"50%\" class=\"middle-heading1\">\r\n                <span class=\"middle-heading\">Motor Third party Liability Policy</span>\r\n              </div>\r\n              <div fxFlex=\"30%\" fxFlex.xs=\"50%\" fxLayoutAlign.xs=\"start center\" fxLayoutAlign=\"end end\">\r\n                <div fxLayout.xs=\"column\" class=\"num1\">\r\n                  <div fxFlex.xs=\"50%\" class=\"num\" ng-style=\"color: whitesmoke;\">\r\n                    382<span class=\"nearelm\">,00 BGN</span>\r\n                  </div>\r\n                  <div fxFlex.xs=\"50%\" class=\"bgn\">\r\n                    Four payments\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div fxlayout=\"column\">\r\n    <mat-radio-group formControlName=\"cover\" (change)=\"change()\">\r\n      <div fxLayout=\"column\" fxLayoutGap=\"5%\">\r\n        <mat-card class=\"mat-elevation-z8 firstcard\">\r\n          <mat-card-content fxLayout=\"column\">\r\n            <div fxFlex=\"40\">\r\n              <mat-radio-button id=\"none\" name=\"none\" class=\"sub-head\" value=\"none\">None</mat-radio-button>\r\n            </div>\r\n            <div fxFlex=\"40\" class=\"mon1\">\r\n              Description of additional cover here\r\n            </div>\r\n          </mat-card-content>\r\n        </mat-card>\r\n\r\n        <mat-card class=\"mat-elevation-z8 secondcard\">\r\n          <mat-card-content fxLayout=\"column\" fxLayoutGap.xs=\"1%\">\r\n            <div fxFlex=\"20%\" fxLayout=\"row\" fxLayout.xs=\"column\">\r\n              <div fxFlex=\"80%\" fxLayout=\"column\" fxLayout.xs=\"row\" class=\"none\">\r\n                <div fxFlex=\"20%\">\r\n                  <mat-radio-button class=\"sub-head\" value=\"premium\">Premium</mat-radio-button>\r\n                </div>\r\n                <div fxFlex=\"80%\" fxLayout.xs=\"column\" fxLayout=\"row\">\r\n                  <div fxFlex=\"20%\" fxFlex.xs=\"40%\" fxFlex.sm=\"30%\" fxLayoutAlign.xs=\"start\"\r\n                    class=\"bestvalue1 bestvalue\">\r\n                    <button mat-raised-button color=\"accent\">Best Value</button>\r\n                  </div>\r\n                  <div fxFlex=\"80%\" fxFlex.xs=\"60%\" fxFlex.sm=\"70%\" fxLayoutAlign.xs=\"start\" class=\"mon2 mon\">\r\n                    Description of additional cover here\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div fxFlex=\"20%\" fxLayout.xs=\"row\" fxLayout=\"column\" class=\"cardrow\" class=\"whitecard\">\r\n                <div fxFlex=\"100%\" fxLayoutAlign.xs=\"start\" fxLayoutAlign=\"end end\" fxLayout=\"column\">\r\n                  <div class=\"num\">+25<span class=\"nearelm\">,00 BGN</span></div>\r\n                  <div class=\"months\">\r\n                    for 12 months\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div fxLayout=\"column\" fxFlex=\"40%\" fxFlex.xs=\"30%\">\r\n              <a routerlink=\"www.google.com\"><u class=\"spc\">See what's more</u></a>\r\n            </div>\r\n          </mat-card-content>\r\n        </mat-card>\r\n\r\n        <mat-card class=\"mat-elevation-z8 thirdcard\">\r\n          <mat-card-content fxLayout=\"column\" fxLayoutGap.xs=\"1%\">\r\n            <div fxFlex=\"40\" fxLayout=\"row\" fxLayout.xs=\"column\">\r\n              <div fxFlex=\"40\" fxLayout=\"column\">\r\n                <div fxFlex=\"40\" fxFlex.xs=\"60%\">\r\n                  <mat-radio-button class=\"sub-head\" value=\"vip\">VIP</mat-radio-button>\r\n                </div>\r\n                <div fxFlex=\"40\" fxFlex.xs=\"60%\" class=\"mon1\" flexLayoutAlign.xs=\"start-start\">\r\n                  Description of additional cover here.\r\n                </div>\r\n              </div>\r\n              <div fxFlex=\"60%\" fxLayoutAlign=\"end end\" fxLayout=\"column\" fxLayoutAlign.xs=\"start\" class=\"whitecard\">\r\n                <div class=\"num\">+80<span class=\"nearelm\">,00 BGN</span></div>\r\n                <div class=\"months\">\r\n                  for 12 months\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div fxFlex=\"40\" fxLayout=\"column\">\r\n              <div fxLayout=\"column\" fxFlex=\"30%\" fxFlex.xs=\"30%\" fxLayoutGap.xs=\"5%\" fxLayoutGap.sm=\"6%\">\r\n                <a routerlink=\"www.google.com\"><u class=\"spc\">See what's more</u></a>\r\n              </div>\r\n              <br />\r\n\r\n              <div fxFlex=\"60%\" fxFlex.xs=\"60%\">\r\n                <div class=\"textcolor\">\r\n                  <p>\r\n                    <b>Services provded under the \"PREMIUM\" clause, but with\r\n                      higher limits when transporting vehicles</b>\r\n                  </p>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" [src]=\"tickimage\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      In case of an insurance event(no limit in the number of\r\n                      transports and up to 900 km mileage)</span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      Technical failure(no mileage limit and up to 2\r\n                      transports)</span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      Wrong fuet(disposable)</span>\r\n                  </div>\r\n                  <br />\r\n\r\n                  <p><b>And more:</b></p>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      Stay in the parking lot of the damaged car</span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      Overview in a hotel of the driver of the vehicle\r\n                    </span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      Transportation of persons traveling in vehicles, in case\r\n                      the vehicle has suffered damage</span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">\r\n                      Medical transportation in case of an accident</span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">Costs of examinations, medical examinations and\r\n                      manipulations in case of bodily injuries to the driver and\r\n                      / or persons traveling in the vehicle as a result of the\r\n                      accident</span>\r\n                  </div>\r\n                  <div fxLayout=\"row\" fxLayoutGap.xs=\"5%\">\r\n                    <div class=\"image\" fxFlex=\"5%\">\r\n                      <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n                    </div>\r\n\r\n                    <span fxFlex=\"90%\" fxLayout=\"column\">In case of damages covered by Casco + insurance - up to 2\r\n                      vehicle inspections at the address indicated by the\r\n                      client</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </mat-card-content>\r\n        </mat-card>\r\n\r\n        <button mat-raised-button color=\"primary\" type=\"submit\"\r\n          class=\"btn btn-primary rounded-pill col-sm-4 col-lg-2 col-md-3 nextbtn\"\r\n          [disabled]=\"!additionalcoverForm.valid\" matStepperNext>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </mat-radio-group>\r\n  </div>\r\n</form>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4c124a2d2bee653624738464f0627795",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'stepperForm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'stepperForm';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "ContactDetailsComponent",
            "id": "component-ContactDetailsComponent-6f165e71fa578a0951db5ff2bb4c07a8",
            "file": "src/app/components/tab/mtpl-policy/Steps/contact-details/contact-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact-details",
            "styleUrls": [
                "./contact-details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Cappartment",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "Cblock",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "Ccity",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "Centrance",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "CNo",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "Cphone",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "Cpincode",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "Cstreet",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "getProvinces",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "provincesArray",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\nimport { ProvincesService } from '../../../../shared/provinces-service/provinces.service';\r\n\r\n@Component({\r\n  selector: 'app-contact-details',\r\n  templateUrl: './contact-details.component.html',\r\n  styleUrls: ['./contact-details.component.css'],\r\n})\r\nexport class ContactDetailsComponent implements OnInit {\r\n  @Output() OnToggle = new EventEmitter();\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n  @Input() Ccity: string;\r\n  @Input() Cpincode: string;\r\n  @Input() Cstreet: string;\r\n  @Input() CNo: string;\r\n  @Input() Cblock: string;\r\n  @Input() Centrance: string;\r\n  @Input() Cappartment: string;\r\n  @Input() Cphone: string;\r\n  registerForm: FormGroup;\r\n  provincesArray;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private GAService: GoogleAnalyticsService,\r\n    private provServ: ProvincesService,\r\n    private commonDataService: CommonDataService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.formBuilder.group({\r\n      city: ['', Validators.required],\r\n      pincode: ['', Validators.required],\r\n      street: ['', Validators.required],\r\n      No: ['', Validators.required],\r\n      block: [''],\r\n      entrance: [''],\r\n      appartment: [''],\r\n      phone: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[0-9]+$'),\r\n          Validators.minLength(8),\r\n          Validators.maxLength(9),\r\n        ],\r\n      ],\r\n    });\r\n    this.getProvinces();\r\n  }\r\n  submit = () => {\r\n    this.GAService.event('Next Button clicked', 'Contact Details', 'Next');\r\n    this.commonDataService.contactinformation.next(this.registerForm.value);\r\n    this.OnSubmission.emit('Contact Details form is submitted!');\r\n  }\r\n  getProvinces = () => {\r\n    this.provServ.getProvinces().subscribe((res) => {\r\n      this.provincesArray = res;\r\n    });\r\n  }\r\n  change = () => {\r\n    if (this.registerForm.valid) {\r\n      this.OnToggle.emit(true);\r\n      this.commonDataService.contactinformation.next(this.registerForm.value);\r\n    } else {\r\n      this.OnToggle.emit(false);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Style inputs with type=\"text\", select elements and textareas */\r\n\r\nh1 {\r\n  color: rgb(8, 56, 95);\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  font-weight: bold;\r\n}\r\nlabel {\r\n  color: rgb(8, 56, 95);\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\n/* Style the submit button with a specific background color etc */\r\n\r\n@media screen and (max-width: 1090px) {\r\n  .space {\r\n    padding: 4px;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 800px) {\r\n  .line {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 575px) {\r\n  .nextbtn {\r\n    width: 250px;\r\n    margin: auto;\r\n    display: block;\r\n  }\r\n}\r\n",
                    "styleUrl": "./contact-details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    },
                    {
                        "name": "provServ",
                        "type": "ProvincesService"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "provServ",
                        "type": "ProvincesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1><b>Contact Details</b></h1>\r\n<br />\r\n<form [formGroup]=\"registerForm\" (submit)=\"submit()\">\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lg=\"space-between center\">\r\n    <label for=\"city\" fxFlex=\"31%\" fxHide.xs>City</label>\r\n\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label>City</mat-label>\r\n      <mat-select id=\"city\" formControlName=\"city\" name=\"city\" (change)=\"change()\">\r\n        <mat-option>None</mat-option>\r\n        <mat-option *ngFor=\"let obj of provincesArray\" value=\"{{ obj.pname }}\">{{ obj.pname }}</mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"\r\n          registerForm.controls.city.hasError('required') &&\r\n          (registerForm.controls.city.dirty ||\r\n            registerForm.controls.city.touched)\r\n        \">\r\n        This field is mandatory</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label>PinCode</mat-label>\r\n      <input matInput formControlName=\"pincode\" id=\"num\" name=\"num\" (change)=\"change()\" />\r\n      <mat-error *ngIf=\"\r\n          registerForm.controls.pincode.hasError('required') &&\r\n          (registerForm.controls.pincode.dirty ||\r\n            registerForm.controls.pincode.touched)\r\n        \" class=\"error\">This field is mandatory</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <mat-divider></mat-divider>\r\n  <br />\r\n\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lg=\"space-between center\">\r\n    <label for=\"city\" fxFlex=\"31%\" fxHide.xs>Street and Number</label>\r\n\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label>Street</mat-label>\r\n      <input matInput formControlName=\"street\" id=\"street\" name=\"street\" (change)=\"change()\" />\r\n      <mat-error *ngIf=\"\r\n          registerForm.controls.street.hasError('required') &&\r\n          (registerForm.controls.street.dirty ||\r\n            registerForm.controls.street.touched)\r\n        \">\r\n        This field is mandatory</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label id=\"streetNumber\" name=\"streetNumber\">Street Number</mat-label>\r\n      <input matInput formControlName=\"No\" id=\"streetNumber\" name=\"streetNumber\" (change)=\"change()\" />\r\n      <mat-error *ngIf=\"\r\n          registerForm.controls.No.hasError('required') &&\r\n          (registerForm.controls.No.dirty || registerForm.controls.No.touched)\r\n        \" class=\"error\">This field is mandatory</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <mat-divider></mat-divider>\r\n  <br />\r\n  <label>Block,Entrance and Apartment</label><br />\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\">\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label>Block</mat-label>\r\n      <input matInput id=\"block\" formControlName=\"block\" name=\"blockName\" (change)=\"change()\" />\r\n      <mat-hint>Optional</mat-hint>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label>Entrance</mat-label>\r\n      <input matInput id=\"entranceName\" formControlName=\"entrance\" name=\"entranceName\" (change)=\"change()\" />\r\n      <mat-hint>Optional</mat-hint>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n      <mat-label>Appartment</mat-label>\r\n      <input matInput id=\"appartmentName\" formControlName=\"appartment\" name=\"appartmentName\" (change)=\"change()\" />\r\n      <mat-hint>Optional</mat-hint>\r\n    </mat-form-field>\r\n  </div>\r\n  <br />\r\n\r\n  <mat-divider></mat-divider>\r\n  <br />\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lg=\"space-between center\">\r\n    <label for=\"lnch\" fxFlex=\"60%\">Phone Number</label>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n      <mat-label>Phone Number</mat-label>\r\n      <input matInput formControlName=\"phone\" id=\"phoneNo\" name=\"phoneNo\" (change)=\"change()\" />\r\n      <mat-error *ngIf=\"\r\n          registerForm.controls.phone.hasError('required') &&\r\n          (registerForm.controls.phone.dirty ||\r\n            registerForm.controls.phone.touched)\r\n        \">This field is mandatory</mat-error>\r\n      <mat-error *ngIf=\"\r\n          registerForm.controls.phone.hasError('pattern') &&\r\n          (registerForm.controls.phone.dirty ||\r\n            registerForm.controls.phone.touched)\r\n        \">Only numbers allowed</mat-error>\r\n      <mat-error *ngIf=\"\r\n          !registerForm.controls.phone.hasError('pattern') &&\r\n          (registerForm.controls.phone.hasError('minlength') ||\r\n            registerForm.controls.phone.hasError('maxlength')) &&\r\n          (registerForm.controls.phone.dirty ||\r\n            registerForm.controls.phone.touched)\r\n        \">Enter valid phone number</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <button id=\"contactbtn\" name=\"contactbtn\" type=\"submit\" mat-raised-button color=\"primary\" matStepperNext\r\n    [disabled]=\"!registerForm.valid\">\r\n    Calculate\r\n  </button>\r\n</form>"
        },
        {
            "name": "DeliveryComponent",
            "id": "component-DeliveryComponent-301a5a1fd933a279550eedb6fa7255c2",
            "file": "src/app/components/tab/mtpl-policy/Steps/delivery/delivery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delivery",
            "styleUrls": [
                "./delivery.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./delivery.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Dappt",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "Dblock",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "Dcity",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "Dcontact",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "Dentrance",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "DfullName",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "Dnotes",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "Dnumber",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "Dpincode",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "Dstreet",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "Dtype",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "cities",
                    "defaultValue": "[\r\n    'New Delhi',\r\n    'Mumbai',\r\n    'Chennai',\r\n    'Bangalore',\r\n    'Kolkata',\r\n    'Mysore',\r\n    'Pune',\r\n    'Jaipur',\r\n  ]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "codes",
                    "defaultValue": "[55, 86, 33, 49, 91]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "detailsForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "mediaSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "provincesArray",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "getProvinces",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "toggle1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MediaChange, MediaObserver } from '@angular/flex-layout';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { Subscription } from 'rxjs';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\nimport { ProvincesService } from '../../../../shared/provinces-service/provinces.service';\r\n\r\n@Component({\r\n  selector: 'app-delivery',\r\n  templateUrl: './delivery.component.html',\r\n  styleUrls: ['./delivery.component.css'],\r\n})\r\nexport class DeliveryComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  private mediaSub: Subscription;\r\n\r\n  @Output() OnToggle = new EventEmitter();\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n  @Input() DfullName: string;\r\n  @Input() Dcity: string;\r\n  @Input() Dpincode: string;\r\n  @Input() Dstreet: string;\r\n  @Input() Dnumber: string;\r\n  @Input() Dblock: string;\r\n  @Input() Dentrance: string;\r\n  @Input() Dappt: string;\r\n  @Input() Dnotes: string;\r\n  @Input() Dtype: string;\r\n  @Input() Dcontact: string;\r\n  detailsForm: FormGroup;\r\n  provincesArray;\r\n  cities: string[] = [\r\n    'New Delhi',\r\n    'Mumbai',\r\n    'Chennai',\r\n    'Bangalore',\r\n    'Kolkata',\r\n    'Mysore',\r\n    'Pune',\r\n    'Jaipur',\r\n  ];\r\n\r\n  codes: number[] = [55, 86, 33, 49, 91];\r\n\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private mediaObserver: MediaObserver,\r\n    private formBuilder: FormBuilder,    \r\n    private provServ: ProvincesService,\r\n    private GAService: GoogleAnalyticsService,\r\n    private commonDataService: CommonDataService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // tslint:disable-next-line: deprecation\r\n    this.mediaSub = this.mediaObserver.media$.subscribe(\r\n      (change: MediaChange) => {\r\n      }\r\n    );\r\n\r\n    this.detailsForm = this.formBuilder.group({\r\n      fullName: [\r\n        '',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.pattern('^[a-zA-Z ]+'),\r\n        ]),\r\n      ],\r\n      city: ['', Validators.required],\r\n      pincode: [\r\n        '',\r\n        Validators.compose([Validators.required, Validators.maxLength(6)]),\r\n      ],\r\n      street: [''],\r\n      number: [''],\r\n      block: [''],\r\n      entrance: [''],\r\n      appt: [''],\r\n      contact: [\r\n        '',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.max(999999999),\r\n          Validators.min(10000000),\r\n        ]),\r\n      ],\r\n      business: ['', Validators.required],\r\n      notes: [''],\r\n    });\r\n    this.getProvinces();\r\n  }\r\n\r\n  change = () => {\r\n    if (this.detailsForm.valid) {\r\n      this.OnToggle.emit(true);\r\n      this.commonDataService.deliveryinformation.next(this.detailsForm.value);\r\n    } else {\r\n      this.OnToggle.emit(false);\r\n    }\r\n  }\r\n  toggle() {\r\n    this.submitted = true;\r\n  }\r\n\r\n  toggle1() {\r\n    this.submitted = false;\r\n  }\r\n\r\n  ngAfterViewInit() {}\r\n\r\n  ngOnDestroy() {\r\n    if (this.mediaSub) {\r\n      this.mediaSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  getProvinces() {\r\n    this.provServ.getProvinces().subscribe((response) => {\r\n      this.provincesArray = response;\r\n    });\r\n  }\r\n\r\n  register() {\r\n    this.GAService.event('Next Button clicked', 'Delivery', 'Next');\r\n    this.commonDataService.deliveryinformation.next(this.detailsForm.value);\r\n    this.OnSubmission.emit('Delivery form is submitted!');\r\n  }\r\n  get formControls() {\r\n    return this.detailsForm.controls;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\r\n  color: rgb(12, 44, 70);\r\n  font-size: 25px;\r\n  padding-top: 10px;\r\n  font-weight: bold;\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n}\r\n\r\n.heading-1 {\r\n  color: rgb(12, 44, 70);\r\n  font-size: 30px;\r\n}\r\n\r\n.heading-2 {\r\n  font-size: 20px;\r\n  margin-left: 15px;\r\n}\r\n.heading-3 {\r\n  margin-left: 15px;\r\n}\r\n\r\n.mat-radio-button ~ .mat-radio-button {\r\n  margin-left: 16px;\r\n  height: 20px;\r\n  width: 20px;\r\n}\r\n\r\n.delivery {\r\n  padding-top: 35px;\r\n  padding-left: 35px;\r\n  padding-bottom: 20px;\r\n  color: gray;\r\n  border: solid gray 1px;\r\n  border-radius: 5px;\r\n  font-size: 15px;\r\n}\r\n",
                    "styleUrl": "./delivery.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "provServ",
                        "type": "ProvincesService"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "provServ",
                        "type": "ProvincesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 130
                    }
                }
            },
            "templateData": "<form class=\"container\" [formGroup]=\"detailsForm\" (ngSubmit)=\"register()\">\r\n  <div fxLayout=\"column\" fxLayout.lt-md=\"column\" fxLayoutWrap fxLayoutGap=\"5%\">\r\n    <div id=\"deliveryAddress\" name=\"deliveryAddress\" class=\"heading\">\r\n      Delivery Address\r\n    </div>\r\n    <div fxLayout=\"column\" fxLayoutWrap>\r\n      <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n        <div class=\"form-group\" fxFlex=\"100%\">\r\n          <mat-form-field appearance=\"outline\" fxLayout=\"column\">\r\n            <mat-label>\r\n              Full Name\r\n            </mat-label>\r\n            <input matInput placeholder=\"Andrew Roberts\" id=\"name\" name=\"name\" formControlName=\"fullName\"\r\n              (change)=\"change()\" />\r\n            <mat-error class=\"error\" *ngIf=\"\r\n                formControls.fullName.touched && formControls.fullName.errors\r\n              \">\r\n              <mat-error *ngIf=\"formControls.fullName.errors.required\">This field is mandatory</mat-error>\r\n              <mat-error *ngIf=\"formControls.fullName.errors.pattern\">Only alphabets are allowed</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutWrap fxLayoutGap=\"2%\">\r\n        <div class=\"form-group\" fxFlex=\"53%\" fxLayout=\"column\">\r\n          <mat-form-field appearance=\"fill\">\r\n            <mat-label>Choose City</mat-label>\r\n            <mat-select formControlName=\"city\" (selectionChange)=\"change()\">\r\n              <mat-option>None</mat-option>\r\n              <mat-option id=\"city\" name=\"city\" *ngFor=\"let city of provincesArray\" [value]=\"city.pname\">\r\n                {{ city.pname }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error class=\"error\" *ngIf=\"formControls.city.touched && formControls.city.errors\">\r\n              <mat-error *ngIf=\"formControls.city.errors.required\">This field is required</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"form-group\" fxFlex=\"45%\">\r\n          <mat-form-field appearance=\"outline\" fxLayout=\"column\">\r\n            <mat-label>Pincode</mat-label>\r\n            <input matInput id=\"pincode\" name=\"pincode\" placeholder=\"123456\" formControlName=\"pincode\"\r\n              (change)=\"change()\" />\r\n            <mat-error class=\"error\" *ngIf=\"\r\n                formControls.pincode.touched && formControls.pincode.errors\r\n              \">\r\n              <mat-error *ngIf=\"formControls.pincode.errors.required\">This field is manadatory</mat-error>\r\n              <mat-error *ngIf=\"formControls.pincode.errors.maxLength\">Only 6 characters are allowed</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutWrap fxLayoutGap=\"2%\">\r\n        <div class=\"form-group\" fxFlex=\"53%\" fxLayout=\"column\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Street</mat-label>\r\n            <input matInput placeholder=\"Nelson Street\" id=\"street\" name=\"street\" formControlName=\"street\"\r\n              (change)=\"change()\" />\r\n            <mat-error class=\"error\" *ngIf=\"formControls.street.touched && formControls.street.errors\">\r\n              <mat-error *ngIf=\"formControls.street.errors.required\">This field is required</mat-error>\r\n              <mat-error *ngIf=\"formControls.street.errors.minlength\">Street should be atleast 3 characters</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"form-group\" fxFlex=\"45%\">\r\n          <mat-form-field appearance=\"outline\" fxLayout=\"column\">\r\n            <mat-label>Number</mat-label>\r\n            <input matInput id=\"number\" name=\"number\" placeholder=\"A3\" formControlName=\"number\" (change)=\"change()\" />\r\n            <mat-error class=\"error\" *ngIf=\"formControls.number.touched && formControls.number.errors\">\r\n              <mat-error *ngIf=\"formControls.number.errors.required\">Number is required</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutWrap fxLayoutGap=\"2%\">\r\n        <div class=\"form-group\" fxFlex=\"32%\">\r\n          <mat-form-field appearance=\"outline\" fxLayout=\"column\">\r\n            <mat-label>Block</mat-label>\r\n            <input matInput id=\"block\" name=\"block\" placeholder=\"South Block\" formControlName=\"block\"\r\n              (change)=\"change()\" />\r\n            <mat-hint>Optional</mat-hint>\r\n            <mat-error class=\"error\" *ngIf=\"formControls.block.touched && formControls.block.errors\">\r\n              <mat-error *ngIf=\"formControls.block.errors.required\">Block is required</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"form-group\" fxFlex=\"32%\">\r\n          <mat-form-field appearance=\"outline\" fxLayout=\"column\">\r\n            <mat-label>Entrance</mat-label>\r\n            <input matInput id=\"entrance\" name=\"entrance\" placeholder=\"East Gate\" formControlName=\"entrance\"\r\n              (change)=\"change()\" />\r\n            <mat-hint>Optional</mat-hint>\r\n            <mat-error class=\"error\" *ngIf=\"\r\n                formControls.entrance.touched && formControls.entrance.errors\r\n              \">\r\n              <mat-error *ngIf=\"formControls.entrance.errors.required\">Entrance is required</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"form-group\" fxFlex=\"32%\">\r\n          <mat-form-field appearance=\"outline\" fxLayout=\"column\">\r\n            <mat-label>Apt</mat-label>\r\n            <input matInput id=\"apt\" name=\"apt\" placeholder=\"Nelson Appartment\" formControlName=\"appt\"\r\n              (change)=\"change()\" />\r\n            <mat-hint>Optional</mat-hint>\r\n            <mat-error class=\"error\" *ngIf=\"formControls.appt.touched && formControls.appt.errors\">\r\n              <mat-error *ngIf=\"formControls.appt.errors.required\">Appartment is required</mat-error>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <br />\r\n  <div fxLayout=\"column\" fxLayoutWrap fxLayoutGap=\"3%\">\r\n    <div class=\"heading-1\" fxFlex=\"80%\">\r\n      Additional Details\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n      <div fxFlex=\"70%\" fxLayout=\"column\" class=\"form-group\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Contact</mat-label>\r\n          <input matInput id=\"contact\" name=\"contact\" formControlName=\"contact\" placeholder=\"987654321\"\r\n            (change)=\"change()\" />\r\n          <mat-error class=\"error\" *ngIf=\"formControls.contact.touched && formControls.contact.errors\">\r\n            <mat-error *ngIf=\"formControls.contact.errors.required\">This field is mandatory</mat-error>\r\n            <mat-error *ngIf=\"formControls.contact.errors.min\">Minimum 8 characters are required</mat-error>\r\n            <mat-error *ngIf=\"formControls.contact.errors.max\">Maximum 9 characters are required</mat-error>\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n      <div fxFlex=\"50%\" fxLayout=\"column\">\r\n        <span class=\"heading-2\">\r\n          Type of Address\r\n        </span>\r\n        <p class=\"heading-3\">\r\n          For Business address your package will be delivered only during <br />\r\n          normal work days from 9:00 to 17:00\r\n        </p>\r\n      </div>\r\n      <div fxFlex=\"50%\" fxLayout=\"column\" class=\"form-group\">\r\n        <mat-radio-group aria-label=\"Select an option\" formControlName=\"business\" (change)=\"change()\">\r\n          <mat-radio-button id=\"home\" name=\"home\" value=\"Home\" name=\"business\">Home</mat-radio-button>\r\n          <mat-radio-button id=\"business\" name=\"business\" value=\"Business\" name=\"business\">Business</mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n      <div fxFlex=\"80%\" fxLayout=\"column\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Additional Notes</mat-label>\r\n          <mat-hint>Optional</mat-hint>\r\n          <textarea style=\"resize: none;\" matInput id=\"notes\" name=\"notes\" placeholder=\"Additional Notes\"\r\n            formControlName=\"notes\" cols=\"30\" rows=\"10\" (change)=\"change()\"></textarea>\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n      <div fxFlex=\"100%\" fxLayout=\"column\" class=\"delivery\">\r\n        <b>Estimated delivery in your area is 2 days</b>\r\n        <p><a routerlink=\"#\">More info here</a></p>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row\">\r\n      <button id=\"next\" name=\"next\" type=\"submit\" matStepperNext [disabled]=\"detailsForm.invalid\" mat-raised-button\r\n        color=\"primary\" class=\"rounded-pill\">\r\n        Next\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>"
        },
        {
            "name": "InstallmentComponent",
            "id": "component-InstallmentComponent-215d10d693a50b21dfcf7263495b9ee5",
            "file": "src/app/components/tab/mtpl-calculator/Steps/installment/installment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-installment",
            "styleUrls": [
                "./installment.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./installment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "termSelected",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnFourPayments",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnSinglePayment",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnTwoPayments",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "errorMessage",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "installmentForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "obj",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "serviceData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "submitInstalmentForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\nimport { InstallmentService } from './installment.service';\r\n\r\n@Component({\r\n  selector: 'app-installment',\r\n  templateUrl: './installment.component.html',\r\n  styleUrls: ['./installment.component.css'],\r\n})\r\nexport class InstallmentComponent implements OnInit {\r\n  installmentForm: FormGroup;\r\n  errorMessage;\r\n  @Output() OnToggle = new EventEmitter();\r\n  @Input() termSelected: string;\r\n  serviceData;\r\n  obj;\r\n\r\n  @Output() OnSinglePayment = new EventEmitter<any>();\r\n  @Output() OnTwoPayments = new EventEmitter<any>();\r\n  @Output() OnFourPayments = new EventEmitter<any>();\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private GAService: GoogleAnalyticsService,\r\n    private installmentService: InstallmentService,\r\n    private commonDataService: CommonDataService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.installmentForm = this.formBuilder.group({\r\n      term: ['', Validators.required],\r\n      installment: [''],\r\n    });\r\n    this.installmentService.getInstallmentData().subscribe(\r\n      (res) => {\r\n        this.serviceData = res;\r\n      },\r\n      (err) => {\r\n        this.errorMessage = err.error.message;\r\n        console.log(this.errorMessage);\r\n      }\r\n    );\r\n  }\r\n  submitInstalmentForm() {\r\n    this.router.navigate(['/']);\r\n  }\r\n  submit = () => {\r\n    this.GAService.event('Next Button clicked', 'Installment', 'Next');\r\n    this.commonDataService.installment.next(this.obj);\r\n    this.OnSubmission.emit('Installemt form is submitted!');\r\n  }\r\n  change = () => {\r\n    for (const element of this.serviceData) {\r\n      if (element.title === this.installmentForm.value.term) {\r\n        const obj = {\r\n          term: this.installmentForm.value.term,\r\n          installments: element.installments,\r\n          amount: element.amount,\r\n        };\r\n        this.obj = obj;\r\n      }\r\n    }\r\n    if (this.installmentForm.valid) {\r\n      this.OnToggle.emit(true);\r\n      this.commonDataService.installment.next(this.obj);\r\n    } else {\r\n      this.OnToggle.emit(false);\r\n    }\r\n    this.commonDataService.installmentData.next(this.obj);\r\n    // code for storybook START\r\n    if (this.obj.term === this.serviceData[0].title) {\r\n      this.OnSinglePayment.emit('You have opted Single Payment option');\r\n    } else if (this.obj.term === this.serviceData[1].title) {\r\n      this.OnTwoPayments.emit('You have opted Two Payments option');\r\n    } else {\r\n      this.OnFourPayments.emit('You have opted Four Payments option');\r\n    }\r\n    // code for storybook START\r\n  }\r\n\r\n  get formControl() {\r\n    return this.installmentForm.controls;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\r\n  color: rgb(8, 56, 95);\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  font-weight: bold;\r\n}\r\n.sub-head {\r\n  font-weight: bold;\r\n}\r\n.bgn {\r\n  color: rgb(8, 56, 95);\r\n  text-align: right;\r\n  font-size: 15px;\r\n  padding-top: 5%;\r\n}\r\n.cardrow {\r\n  padding-left: 20px;\r\n  color: rgb(8, 56, 95);\r\n}\r\n.nearelm {\r\n  font-size: 20px;\r\n}\r\n.num {\r\n  color: rgb(8, 56, 95);\r\n  text-align: end;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  padding-top: 2%;\r\n}\r\n.mon {\r\n  text-align: left;\r\n  font-size: 15px;\r\n}\r\n.viewhide {\r\n  padding-left: 2%;\r\n  color: rgb(8, 56, 95);\r\n}\r\n.border {\r\n  padding: 0%;\r\n  /*width: 800px;*/\r\n  height: auto;\r\n}\r\n.viewins {\r\n  display: none;\r\n}\r\n.firstcard {\r\n  /*width:800px;*/\r\n  height: auto;\r\n  /*min-width:100px;*/\r\n}\r\n.secondcard {\r\n  /*width:800px;*/\r\n  height: auto;\r\n}\r\n.thirdcard {\r\n  /*width:800px;*/\r\n  height: auto;\r\n}\r\n.content {\r\n  height: auto;\r\n  width: auto;\r\n  color: rgb(8, 56, 95);\r\n  /*width:1000px;*/\r\n}\r\n\r\n.hrline {\r\n  /*width:800px;*/\r\n  margin-left: 30px;\r\n}\r\n.wid {\r\n  /*padding-top: 2%;*/\r\n\r\n  font-size: 18px;\r\n}\r\n.nextbtn {\r\n  min-width: 100px;\r\n}\r\n\r\n@media screen and (max-width: 450px) {\r\n  /*.firstcard,.secondcard,.thirdcard,.content,.hrline{\r\n        width: 350px;\r\n        \r\n    }*/\r\n  .num {\r\n    font-size: 20px;\r\n    padding-left: 10%;\r\n    text-align: left;\r\n    padding-left: 0%;\r\n    padding-top: 5%;\r\n  }\r\n  .nearelm {\r\n    font-size: 13px;\r\n  }\r\n  .bgn {\r\n    font-size: 12px;\r\n    padding-left: 10%;\r\n    text-align: left;\r\n    padding-left: 0%;\r\n  }\r\n  .col-md-5 col-auto col-7 {\r\n    padding-left: 0%;\r\n  }\r\n  .viewins {\r\n    display: block;\r\n    padding-left: 7%;\r\n    padding-top: 5%;\r\n  }\r\n  .viewhide,\r\n  .cardhr {\r\n    display: none;\r\n  }\r\n  /*h1{\r\n        font-size: 150%;\r\n    }*/\r\n  .wid {\r\n    width: 80%;\r\n    padding-top: 2%;\r\n    font-size: 15px;\r\n    width: auto;\r\n  }\r\n  .nextbtn {\r\n    width: 250px;\r\n    margin: auto;\r\n  }\r\n\r\n  .imgsz {\r\n    padding-top: 1%;\r\n  }\r\n}\r\n@media screen and (max-width: 575px) {\r\n  .nextbtn {\r\n    width: 250px;\r\n    margin: auto;\r\n    display: block;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1024px) {\r\n  .viewhide {\r\n    margin-left: 0px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./installment.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    },
                    {
                        "name": "installmentService",
                        "type": "InstallmentService"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "installmentService",
                        "type": "InstallmentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                }
            },
            "templateData": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<h1 class=\"heading\">Installment options</h1>\r\n<br />\r\n<form [formGroup]=\"installmentForm\" (submit)=\"submit()\">\r\n  <div fxLayout=\"column\" fxLayoutGap=\"5%\">\r\n    <div fxlayout=\"column\">\r\n      <mat-radio-group formControlName=\"term\" (change)=\"change()\">\r\n        <div fxLayout=\"column\" fxLayoutGap=\"5%\">\r\n          <div *ngFor=\"let element of serviceData\">\r\n            <mat-card>\r\n              <mat-card-content fxLayout=\"column\">\r\n                <div fxFlex=\"25%\" fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                  <div fxFlex=\"40\">\r\n                    <mat-radio-button class=\"sub-head\" value=\"{{ element.title }}\">{{ element.title }}\r\n                    </mat-radio-button>\r\n                  </div>\r\n                  <div fxFlex=\"60%\" fxLayoutAlign=\"end end\" fxLayoutAlign.xs=\"start\" fxLayout=\"column\"\r\n                    fxLayoutGap.xs=\"5%\">\r\n                    <div id=\"amount\" name=\"amount\" class=\"num\">\r\n                      {{ element.amount }}<span class=\"nearelm\">BGN</span>\r\n                    </div>\r\n                    <div id=\"saving\" name=\"saving\" class=\"months\">\r\n                      You save {{ element.saving }} BGN\r\n                    </div>\r\n                    <div></div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div fxFlex=\"10%\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"5%\">\r\n                  <div fxFlex=\"20%\">\r\n                    <button id=\"subtitle\" name=\"subtitle\" mat-raised-button color=\"accent\">\r\n                      {{ element.subtitle }}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <br />\r\n                <div *ngIf=\"element.installments.length > 0\" fxFlex=\"1%\" fxLayout=\"row\">\r\n                  <mat-divider></mat-divider>\r\n                </div>\r\n                <div fxFlex=\"20%\" fxLayout=\"row\" fxLayoutGap=\"5%\" fxLayout.xs=\"column\">\r\n                  <div *ngFor=\"\r\n                      let installments of element.installments;\r\n                      let indexOfElement = index\r\n                    \">\r\n                    {{ indexOfElement + 1 | ordinal }} Installment\r\n                    <div class=\"sub-head\">\r\n                      {{ installments }} BGN\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </mat-card-content>\r\n            </mat-card>\r\n          </div>\r\n        </div>\r\n      </mat-radio-group>\r\n    </div>\r\n    <div>\r\n      <mat-divider></mat-divider>\r\n    </div>\r\n\r\n    <div fxLayout=\"column\">\r\n      <div fxLayout=\"row\">\r\n        <div class=\"image\" fxFlex=\"10%\">\r\n          <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" alt=\"tick\" />\r\n        </div>\r\n\r\n        <span fxFlex=\"90%\" fxLayout=\"column\">Costs of examinations, medical Premiums indicated are final and\r\n          include Contribution to the Guarantee and Insurance Fund, sticker and\r\n          2% tax on insurance premiums.</span>\r\n      </div>\r\n      <div fxLayout=\"row\">\r\n        <div class=\"image\" fxFlex=\"10%\">\r\n          <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" />\r\n        </div>\r\n\r\n        <span fxFlex=\"90%\" fxLayout=\"column\">Costs of examinations, medical The insurance premium is calculated\r\n          with included - 5% Discount for insurance with \"Casco+\"</span>\r\n      </div>\r\n\r\n      <div fxLayout=\"row\">\r\n        <div class=\"image\" fxFlex=\"10%\">\r\n          <img width=\"30px\" height=\"20px\" src=\"./assets/tick.jpg\" />\r\n        </div>\r\n\r\n        <span fxFlex=\"90%\" fxLayout=\"column\">Costs of examinations, medical Annual Technical Inspection\r\n          Voucher</span>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <mat-divider></mat-divider>\r\n    </div>\r\n    <div>\r\n      <button id=\"next\" name=\"next\" color=\"primary\" mat-raised-button matStepperNext type=\"submit\"\r\n        [disabled]=\"installmentForm.invalid\">\r\n        Next\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>"
        },
        {
            "name": "InsuringPartyComponent",
            "id": "component-InsuringPartyComponent-eaf12d6fbfb2cc569bfc9ccf41bfef7d",
            "file": "src/app/components/tab/mtpl-calculator/Steps/insuring-party/insuring-party.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-insuring-party",
            "styleUrls": [
                "./insuring-party.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./insuring-party.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "egnLnch",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "emailId",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "pAddress",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addressList",
                    "defaultValue": "['Sofia', 'Varna', 'Burgas']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "insuringParty",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\n\r\n@Component({\r\n  selector: 'app-insuring-party',\r\n  templateUrl: './insuring-party.component.html',\r\n  styleUrls: ['./insuring-party.component.css']\r\n})\r\nexport class InsuringPartyComponent implements OnInit {\r\n  @Output() OnToggle = new EventEmitter();\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n  @Input() egnLnch: string;\r\n  @Input() pAddress: string;\r\n  @Input() emailId: string;\r\n  insuringParty: FormGroup;\r\n  addressList = ['Sofia', 'Varna', 'Burgas'];\r\n  constructor(private fb: FormBuilder, private commonDataService: CommonDataService, private GAService: GoogleAnalyticsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.insuringParty = this.fb.group({\r\n      egn: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]],\r\n      address: ['', Validators.required],\r\n      email: ['', Validators.compose([Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')])]\r\n    });\r\n  }\r\n\r\n  submit = () => {\r\n    this.GAService.event('Next Button clicked', 'Insuring Party', 'Next');\r\n    this.commonDataService.insuringparty.next(this.insuringParty.value);\r\n    this.OnSubmission.emit('Insuring Party form is submitted!');\r\n  }\r\n  change = () => {\r\n    if (this.insuringParty.valid) {\r\n      this.OnToggle.emit(true);\r\n      this.commonDataService.insuringparty.next(this.insuringParty.value);\r\n    } else {\r\n      this.OnToggle.emit(false);\r\n    }\r\n  }\r\n  get formsControl() {\r\n    return this.insuringParty.controls;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\r\n  color: rgb(8, 56, 95);\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\ninput[type=\"text\"],\r\ninput[type=\"date\"],\r\ninput[type=\"email\"] {\r\n  border-radius: 7px;\r\n}\r\nselect {\r\n  border-radius: 7px;\r\n}\r\nh1 {\r\n  color: #003768;\r\n}\r\n@media screen and (max-width: 768px) {\r\n  .line {\r\n    display: none;\r\n  }\r\n}\r\n@media screen and (max-width: 575px) {\r\n  .btn {\r\n    width: 250px;\r\n    margin: auto;\r\n    display: block;\r\n  }\r\n}\r\n",
                    "styleUrl": "./insuring-party.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formsControl": {
                    "name": "formsControl",
                    "getSignature": {
                        "name": "formsControl",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<h1 class=\"heading\">\r\n  <b>Insuring Party</b>\r\n</h1>\r\n<form [formGroup]=\"insuringParty\" (submit)=\"submit()\" class=\"heading\">\r\n  <br />\r\n\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n    <label for=\"lnch\" fxFlex=\"60%\">Enter your EGN/EIK/LNCH</label>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n      <mat-label>LNCH</mat-label>\r\n      <input matInput formControlName=\"egn\" id=\"egn\" name=\"egn\" (change)=\"change()\" />\r\n      <mat-error *ngIf=\"\r\n          insuringParty.controls.egn.hasError('required') &&\r\n          (insuringParty.controls.egn.dirty ||\r\n            insuringParty.controls.egn.touched)\r\n        \" class=\"error\">This field is mandatory</mat-error>\r\n      <mat-error *ngIf=\"\r\n          insuringParty.controls.egn.hasError('pattern') &&\r\n          (insuringParty.controls.egn.dirty ||\r\n            insuringParty.controls.egn.touched)\r\n        \" class=\"error\">Only 10 digit numerical value allowed</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <mat-divider class=\"line\"></mat-divider>\r\n  <br />\r\n\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lg=\"space-between center\">\r\n    <label for=\"address\" fxFlex=\"31%\">Place of Permanent Residence?</label>\r\n\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n      <mat-label>Address</mat-label>\r\n      <mat-select id=\"address\" formControlName=\"address\" name=\"address\" (change)=\"change()\">\r\n        <mat-option>None</mat-option>\r\n        <mat-option *ngFor=\"let a of addressList\" value=\"{{ a }}\">{{\r\n          a\r\n        }}</mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"formsControl.address.errors?.required\">\r\n        This field is mandatory</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-divider class=\"line\"></mat-divider>\r\n  <br />\r\n\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n    <label for=\"email\" fxFlex=\"60%\">Email</label>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput formControlName=\"email\" id=\"email\" name=\"email\" (change)=\"change()\" />\r\n      <mat-error *ngIf=\"\r\n          formsControl.email.touched &&\r\n          formsControl.email.errors &&\r\n          formsControl.email.errors.required\r\n        \">This field is mandatory</mat-error>\r\n      <mat-error *ngIf=\"\r\n          formsControl.email.touched &&\r\n          formsControl.email.errors &&\r\n          formsControl.email.errors.pattern\r\n        \">Please enter a valid email</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <button id=\"next\" name=\"next\" type=\"submit\" matStepperNext mat-raised-button color=\"primary\"\r\n    [disabled]=\"insuringParty.invalid\">\r\n    Next\r\n  </button>\r\n</form>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-156b90660b6a7457265b729a2dbb4dcf",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "asGuestLogin",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "LoginError",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "LoginSuccess",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "redirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Overlay } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ProgressSpinnerComponent } from '../shared/progress-spinner/progress-spinner.component';\r\nimport { LoginService } from './login.service';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  constructor(\r\n    private router: Router,\r\n    private loginService: LoginService,\r\n    private fb: FormBuilder,\r\n    private overlay: Overlay\r\n  ) {}\r\n\r\n  @Output() LoginError = new EventEmitter<any>();\r\n  @Output() LoginSuccess = new EventEmitter<any>();\r\n  @Output() asGuestLogin = new EventEmitter<any>();\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  errorMessage: string;\r\n  loginForm: FormGroup;\r\n  hide = true;\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required]],\r\n      password: ['', [Validators.required]]\r\n    });\r\n  }\r\n  login(): void {\r\n    this.errorMessage = null;\r\n    const overlayRef = this.overlay.create({\r\n      positionStrategy: this.overlay.position().global().centerHorizontally().centerVertically(),\r\n      hasBackdrop: true\r\n    });\r\n    overlayRef.attach(new ComponentPortal(ProgressSpinnerComponent))\r\n    this.loginService.getLoginData(this.loginForm.value).subscribe(\r\n      res => {\r\n        overlayRef.detach()\r\n        const response = JSON.parse(JSON.stringify(res));\r\n        sessionStorage.setItem('id', response.id);\r\n        sessionStorage.setItem('token', response.token);\r\n        sessionStorage.setItem('isLoggedIn', 'true');\r\n        this.name = prompt('How do you like to call you!!');\r\n        console.log(this.name);\r\n        if (this.name != null) {\r\n          sessionStorage.setItem('welcomename', this.name);\r\n        } else {\r\n          sessionStorage.setItem('welcomename', '');\r\n        }\r\n        setTimeout(() => {\r\n          this.router.navigate(['tab']);\r\n        });\r\n      },\r\n      err => {\r\n        overlayRef.detach()\r\n        this.errorMessage = err.error.error;\r\n        console.log(this.errorMessage);\r\n        alert(\"Please enter correct Credentials!\")\r\n      }\r\n    );\r\n  }\r\n\r\n  redirect(): void {\r\n    this.asGuestLogin.emit('logged in as a guest');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 90%;\r\n  padding: 2%;\r\n}\r\nmat-card img {\r\n  object-fit: cover; /*this makes the image in src fit to the size specified below*/\r\n  width: 100%; /* Here you can use wherever you want to specify the width and also the height of the <img>*/\r\n  height: 80%;\r\n}\r\n.login-card-description {\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  font-weight: bold;\r\n  color: rgb(8, 56, 95);\r\n  font-size: 20px;\r\n}\r\n.example-button-row {\r\n  border-radius: 20px;\r\n  font-size: 15px;\r\n}\r\n.login-card-footer-text {\r\n  color: gray;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"container\">\r\n  <mat-card-content>\r\n    <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutWrap fxLayoutGap=\"0.5%\" fxLayoutAlign=\"center center\">\r\n      <div fxFlex=\"40%\">\r\n        <img src=\"../../../assets/cardimg.jpeg\" alt=\"Login Photo\">\r\n      </div>\r\n      <div fxFlex=\"50%\">\r\n        <p class=\"login-card-description\">Sign In</p>\r\n        <form fxLayout=\"column\" fxLayoutAlign=\"center\" [formGroup]=\"loginForm\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Email</mat-label>\r\n            <input matInput placeholder=\"Email\" id=\"email\" name=\"email\" formControlName='email'>\r\n            <mat-error *ngIf=\"loginForm.controls.email.errors?.required\">Required</mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field appearance='outline'>\r\n            <mat-label>Password</mat-label>\r\n            <input matInput id=\"password\" name=\"password\" formControlName='password' [type]=\"hide ? 'password' : 'text'\">\r\n            <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n              <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n            </button>\r\n            <mat-error *ngIf=\"loginForm.controls.password.errors?.required\">Required</mat-error>\r\n          </mat-form-field>\r\n          <button class=\"example-button-row\" color=\"primary\" mat-raised-button (click)=\"login()\" value=\"Login\" [disabled]=\"!loginForm.valid\">Login</button>\r\n        </form>\r\n        <p class=\"login-card-footer-text\">You can create your account at the end of the process <a [routerLink]=\"['/signUp']\"><u>Register here</u></a></p>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>"
        },
        {
            "name": "MTPLCalculatorComponent",
            "id": "component-MTPLCalculatorComponent-032382888735b19b62fcc388acb578e6",
            "file": "src/app/components/tab/mtpl-calculator/mtpl-calculator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mtpl-calculator",
            "styleUrls": [
                "./mtpl-calculator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./mtpl-calculator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "stepChange",
                    "line": 22
                }
            ],
            "outputsClass": [
                {
                    "name": "NextTabSwitch",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChange",
                    "line": 20,
                    "type": "EventEmitter<StepperSelectionEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "move",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "nextTab",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "stepper",
                    "type": "MatStepper",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'stepper'"
                        }
                    ]
                },
                {
                    "name": "toggle1",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "toggle2",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "toggle3",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "toggle4",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "toggle5",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "toggle6",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { StepperSelectionEvent } from '@angular/cdk/stepper';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\n\r\n@Component({\r\n  selector: 'app-mtpl-calculator',\r\n  templateUrl: './mtpl-calculator.component.html',\r\n  styleUrls: ['./mtpl-calculator.component.css']\r\n})\r\nexport class MTPLCalculatorComponent implements OnInit, OnChanges {\r\n  constructor() {}\r\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent>;\r\n  @Output() NextTabSwitch = new EventEmitter();\r\n  @Input() stepChange;\r\n  @ViewChild('stepper') stepper: MatStepper;\r\n\r\n  toggle1 = false;\r\n  toggle2 = false;\r\n  toggle3 = false;\r\n  toggle4 = false;\r\n  toggle5 = false;\r\n  toggle6 = true;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnChanges() {\r\n    if (this.stepChange !== undefined) {\r\n      this.move(this.stepChange);\r\n    }\r\n  }\r\n\r\n  move = index => {\r\n    console.log('calculators', index);\r\n    this.stepper.selectedIndex = index;\r\n  }\r\n\r\n  nextTab = data => {\r\n    this.NextTabSwitch.emit(data);\r\n  }\r\n  change = data => {\r\n    console.log(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 50%;\r\n}\r\n@media screen and (max-width: 800px) {\r\n  .container {\r\n    width: auto;\r\n  }\r\n}\r\n",
                    "styleUrl": "./mtpl-calculator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"container\">\r\n  <mat-horizontal-stepper (selectionChange)=\"change($event)\" labelPosition=\"bottom\" #stepper linear>\r\n\r\n    <mat-step completed={{toggle1}}>\r\n      <ng-template matStepLabel>Vehicle </ng-template>\r\n      <app-vehicle-information (Toggle)=\"toggle1=$event\"></app-vehicle-information>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle2}}>\r\n      <ng-template matStepLabel>Insuring Party</ng-template>\r\n      <app-insuring-party (OnToggle)=\"toggle2=$event\"></app-insuring-party>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle3}}>\r\n      <ng-template matStepLabel>Policy Details</ng-template>\r\n      <app-policy-details (Toggle)=\"toggle3=$event\"></app-policy-details>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle4}}>\r\n      <ng-template matStepLabel>Installments</ng-template>\r\n      <app-installment (OnToggle)=\"toggle4=$event\"></app-installment>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle5}}>\r\n      <ng-template matStepLabel>Covers</ng-template>\r\n      <app-additional-covers (OnToggle)=\"toggle5=$event\" (NextTab)=\"nextTab($event)\"></app-additional-covers>\r\n    </mat-step>\r\n\r\n  </mat-horizontal-stepper>\r\n</div>"
        },
        {
            "name": "MTPLPolicyComponent",
            "id": "component-MTPLPolicyComponent-f619510ed7a73e3f74b2817ee496ad54",
            "file": "src/app/components/tab/mtpl-policy/mtpl-policy.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mtpl-policy",
            "styleUrls": [
                "./mtpl-policy.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./mtpl-policy.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "switchTab",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "move",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "stepper",
                    "type": "MatStepper",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'stepper'"
                        }
                    ]
                },
                {
                    "name": "switch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "toggle1",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "toggle2",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "toggle3",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "toggle4",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "toggle5",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "toggle6",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\n\r\n@Component({\r\n  selector: 'app-mtpl-policy',\r\n  templateUrl: './mtpl-policy.component.html',\r\n  styleUrls: ['./mtpl-policy.component.css']\r\n})\r\nexport class MTPLPolicyComponent implements OnInit {\r\n  constructor() {}\r\n  @Output() switchTab = new EventEmitter();\r\n  @ViewChild('stepper') stepper: MatStepper;\r\n  toggle1 = false;\r\n  toggle2 = false;\r\n  toggle3 = false;\r\n  toggle4 = false;\r\n  toggle5 = true;\r\n  toggle6 = true;\r\n  ngOnInit(): void {}\r\n\r\n  switch = index => {\r\n    this.switchTab.emit(index);\r\n  }\r\n  move = index => {\r\n    this.stepper.selectedIndex = index;\r\n  }\r\n\r\n  change = data => {\r\n    console.log(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 50%;\r\n}\r\n@media screen and (max-width: 800px) {\r\n  .container {\r\n    width: auto;\r\n  }\r\n}\r\n",
                    "styleUrl": "./mtpl-policy.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <mat-horizontal-stepper labelPosition=\"bottom\" #stepper (selectionChange)=\"change($event)\" linear>\r\n    <mat-step completed={{toggle1}}>\r\n      <ng-template matStepLabel>Personal details</ng-template>\r\n      <app-personal-details (OnToggle)=\"toggle1=$event\"></app-personal-details>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle2}}>\r\n      <ng-template matStepLabel>Contact details</ng-template>\r\n      <app-contact-details (OnToggle)=\"toggle2=$event\"></app-contact-details>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle3}}>\r\n      <ng-template matStepLabel>Vehicle Owner</ng-template>\r\n      <app-vehicle-owner (OnToggle)=\"toggle3=$event\"></app-vehicle-owner>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle4}}>\r\n      <ng-template matStepLabel>Delivery</ng-template>\r\n      <app-delivery (OnToggle)=\"toggle4=$event\"></app-delivery>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle5}}>\r\n      <ng-template matStepLabel>Summary</ng-template>\r\n      <app-summary (moveTab)=\"switch($event)\" (changeStep)=\"move($event)\"></app-summary>\r\n    </mat-step>\r\n\r\n    <mat-step completed={{toggle6}}>\r\n      <ng-template matStepLabel>Payment</ng-template>\r\n      <app-payment></app-payment>\r\n    </mat-step>\r\n\r\n  </mat-horizontal-stepper>\r\n</div>"
        },
        {
            "name": "PaymentComponent",
            "id": "component-PaymentComponent-7c4e4c21416d22fd2c9b2696739b1edb",
            "file": "src/app/components/tab/mtpl-policy/Steps/payment/payment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-payment",
            "styleUrls": [
                "./payment.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./payment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Ppayment",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "'MIN=D168454720\\nINVOICE=5555561\\nAMOUNT=500\\nEXP_TIME=01.08.2020\\nDESCR=test'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "dataToPost",
                    "defaultValue": "{\r\n    PAYEE_ACCOUNT: 'karanshirsath97@gmail.com',\r\n    PAYEE_NAME: 'karan',\r\n    PAYMENT_AMOUNT: 1,\r\n    PAYMENT_UNITS: 'USD',\r\n    PAYMENT_ID: '',\r\n    STATUS_URL: 'https://api.epay.com/pay_result.jsp',\r\n    PAYMENT_URL: 'https://api.epay.com/pay_result1.jsp',\r\n    PAYMENT_URL_METHOD: 'post',\r\n    NOPAYMENT_URL: 'https://api.epay.com/pay_result1.jsp',\r\n    NOPAYMENT_URL_METHOD: 'post',\r\n    SUGGESTED_MEMO: 'abc',\r\n    SUGGESTED_MEMO_NOCHANGE: '',\r\n    FORCED_PAYER_ACCOUNT: '',\r\n    INTERFACE_LANGUAGE: 'EN_US',\r\n    CHARACTER_ENCODING: 'UTF-8',\r\n    V2_HASH: '96511492bb663818bfb70fc8c51126b0'\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "enable",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "ePay",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "ePayBG",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "getData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "optradio",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "secretKey",
                    "defaultValue": "'DAKE31QBIB2MGX924034168E1OPAHRPOJXP89EJH075ROUNMCK9SNMCURME0T2YI'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedPayment",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "action",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "box",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "check",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "createHiddenElement",
                    "args": [
                        {
                            "name": "name",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLInputElement",
                    "typeParameters": [],
                    "line": 181,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { MtplCalculatorService } from '../../../../tab/mtpl-calculator/mtpl-calculator.service';\r\nimport { MtplPolicyService } from '../../mtpl-policy.service';\r\nimport * as CryptoJS from 'crypto-js';\r\n@Component({\r\n  selector: 'app-payment',\r\n  templateUrl: './payment.component.html',\r\n  styleUrls: ['./payment.component.css']\r\n})\r\nexport class PaymentComponent implements OnInit {\r\n  constructor(\r\n    private mtplCalculatorService: MtplCalculatorService,\r\n    private mtplPolicyService: MtplPolicyService\r\n  ) {}\r\n  optradio: boolean;\r\n  selectedPayment;\r\n  @Input() Ppayment: string;\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n  enable = true;\r\n  dataToPost = {\r\n    PAYEE_ACCOUNT: 'karanshirsath97@gmail.com',\r\n    PAYEE_NAME: 'karan',\r\n    PAYMENT_AMOUNT: 1,\r\n    PAYMENT_UNITS: 'USD',\r\n    PAYMENT_ID: '',\r\n    STATUS_URL: 'https://api.epay.com/pay_result.jsp',\r\n    PAYMENT_URL: 'https://api.epay.com/pay_result1.jsp',\r\n    PAYMENT_URL_METHOD: 'post',\r\n    NOPAYMENT_URL: 'https://api.epay.com/pay_result1.jsp',\r\n    NOPAYMENT_URL_METHOD: 'post',\r\n    SUGGESTED_MEMO: 'abc',\r\n    SUGGESTED_MEMO_NOCHANGE: '',\r\n    FORCED_PAYER_ACCOUNT: '',\r\n    INTERFACE_LANGUAGE: 'EN_US',\r\n    CHARACTER_ENCODING: 'UTF-8',\r\n    V2_HASH: '96511492bb663818bfb70fc8c51126b0'\r\n  };\r\n  data = 'MIN=D168454720\\nINVOICE=5555561\\nAMOUNT=500\\nEXP_TIME=01.08.2020\\nDESCR=test';\r\n  secretKey = 'DAKE31QBIB2MGX924034168E1OPAHRPOJXP89EJH075ROUNMCK9SNMCURME0T2YI';\r\n\r\n  ngOnInit(): void {}\r\n  check() {\r\n    console.log(this.selectedPayment);\r\n    this.optradio = true;\r\n  }\r\n  box(e) {\r\n    if (e.checked) {\r\n      this.enable = false;\r\n    } else {\r\n      this.enable = true;\r\n    }\r\n  }\r\n  action() {\r\n    this.OnSubmission.emit('Payment method selected!');\r\n  }\r\n  getData = () => {\r\n    if (this.selectedPayment === 'epay') {\r\n      this.ePayBG()\r\n    } else {\r\n      this.ePay()\r\n      // alert('Check console for see data saved at Backend');\r\n      // const idObj = { id: sessionStorage.getItem('id') };\r\n      // this.mtplCalculatorService.getData(idObj).subscribe(\r\n      //   res => {\r\n      //     console.log(res);\r\n      //   },\r\n      //   err => {\r\n      //     console.log(err);\r\n      //   }\r\n      // );\r\n      // this.mtplPolicyService.getData(idObj).subscribe(\r\n      //   res => {\r\n      //     console.log(res);\r\n      //   },\r\n      //   err => {\r\n      //     console.log(err);\r\n      //   }\r\n      // );\r\n    }\r\n  }\r\n  ePayBG = () => {\r\n    const encode = window.btoa(this.data);\r\n    const hash = CryptoJS.HmacSHA1(encode.toString(), this.secretKey).toString();\r\n    const form = window.document.createElement('form');\r\n    form.setAttribute('action', 'https://devep2.datamax.bg/ep2/epay2_demo/');\r\n    form.setAttribute('target', '_self');\r\n    form.appendChild(\r\n      this.createHiddenElement('PAGE', 'paylogin')\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('ENCODED', encode)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('CHECKSUM', hash)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('URL_OK', 'www.google.com')\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('URL_CANCEL', 'www.facebook.com')\r\n    );\r\n    window.document.body.appendChild(form);\r\n    form.submit();\r\n  }\r\n  ePay = () => {\r\n    const form = window.document.createElement('form');\r\n    form.setAttribute('method', 'post');\r\n    form.setAttribute('action', 'https://api.epay.com/paymentApi/merReceive');\r\n    form.setAttribute('target', '_self');\r\n\r\n    form.appendChild(\r\n      this.createHiddenElement('PAYEE_ACCOUNT', this.dataToPost.PAYEE_ACCOUNT)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('PAYEE_NAME', this.dataToPost.PAYEE_NAME)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('PAYMENT_AMOUNT', this.dataToPost.PAYMENT_AMOUNT)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('PAYMENT_UNITS', this.dataToPost.PAYMENT_UNITS)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('PAYMENT_ID', this.dataToPost.PAYMENT_ID)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('STATUS_URL', this.dataToPost.STATUS_URL)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('PAYMENT_URL', this.dataToPost.PAYMENT_URL)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement(\r\n        'PAYMENT_URL_METHOD',\r\n        this.dataToPost.PAYMENT_URL_METHOD\r\n      )\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('NOPAYMENT_URL', this.dataToPost.NOPAYMENT_URL)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement(\r\n        'NOPAYMENT_URL_METHOD',\r\n        this.dataToPost.NOPAYMENT_URL_METHOD\r\n      )\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('SUGGESTED_MEMO', this.dataToPost.SUGGESTED_MEMO)\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement(\r\n        'SUGGESTED_MEMO_NOCHANGE',\r\n        this.dataToPost.SUGGESTED_MEMO_NOCHANGE\r\n      )\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement(\r\n        'FORCED_PAYER_ACCOUNT',\r\n        this.dataToPost.FORCED_PAYER_ACCOUNT\r\n      )\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement(\r\n        'INTERFACE_LANGUAGE',\r\n        this.dataToPost.INTERFACE_LANGUAGE\r\n      )\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement(\r\n        'CHARACTER_ENCODING',\r\n        this.dataToPost.CHARACTER_ENCODING\r\n      )\r\n    );\r\n    form.appendChild(\r\n      this.createHiddenElement('V2_HASH', this.dataToPost.V2_HASH)\r\n    );\r\n\r\n    window.document.body.appendChild(form);\r\n    form.submit();\r\n  }\r\n  createHiddenElement(name, value): HTMLInputElement {\r\n    const hiddenField = document.createElement('input');\r\n    hiddenField.setAttribute('name', name);\r\n    hiddenField.setAttribute('value', value);\r\n    hiddenField.setAttribute('type', 'hidden');\r\n    return hiddenField;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\r\n  margin: 0;\r\n}\r\n.heading {\r\n  color: rgb(8, 56, 95);\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  font-weight: bold;\r\n}\r\n.bg-dark-blue {\r\n  background-color: #003564;\r\n  color: #ffffff;\r\n}\r\n.middle-heading {\r\n  display: flex;\r\n  height: 100%;\r\n  align-items: center;\r\n}\r\n.radio {\r\n  border-radius: 10px;\r\n  -webkit-box-shadow: 0 0 10px #ccc;\r\n  box-shadow: 0 0 10px #ccc;\r\n}\r\n.radio-inner {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 20px;\r\n  margin: 0;\r\n  cursor: pointer;\r\n}\r\n.radio-action {\r\n  width: 25px;\r\n}\r\ninput[type=\"checkbox\" i] {\r\n  margin: 0px 8px 0px 0px;\r\n}\r\n.buy-btn {\r\n  border-radius: 20px;\r\n}\r\n.marginSet {\r\n  margin: 1.25rem;\r\n}\r\n.text-color {\r\n  color: #003564;\r\n  font-size: 15px;\r\n}\r\n.nearelm {\r\n  font-size: 20px;\r\n}\r\n.num {\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n}\r\n.text-small {\r\n  font-size: 20px;\r\n  padding-left: 0%;\r\n}\r\n.mat-card {\r\n  margin-bottom: 21px;\r\n}\r\n.img-payment {\r\n  width: 40px;\r\n  position: absolute;\r\n  z-index: 1;\r\n  top: 64px;\r\n  left: 0px;\r\n}\r\n.mat-card-image:first-child {\r\n  margin-top: -37px;\r\n  border-top-left-radius: inherit;\r\n  border-top-right-radius: inherit;\r\n}\r\n.payment {\r\n  border-width: thin;\r\n  border-style: solid;\r\n  border-color: yellow;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n}\r\nimg {\r\n  width: 70%;\r\n  height: 70%;\r\n  object-fit: contain;\r\n}\r\n.epaystyle {\r\n  width: 200%;\r\n  height: 200%;\r\n}\r\n.cardstyle {\r\n  text-align: justify;\r\n  padding-right: 15px;\r\n  padding-top: 15px;\r\n  padding-bottom: 10px;\r\n}\r\n",
                    "styleUrl": "./payment.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mtplCalculatorService",
                        "type": "MtplCalculatorService"
                    },
                    {
                        "name": "mtplPolicyService",
                        "type": "MtplPolicyService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mtplCalculatorService",
                        "type": "MtplCalculatorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mtplPolicyService",
                        "type": "MtplPolicyService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"heading\">Select payment option</h1>\r\n<div fxLayout=\"column\">\r\n  <mat-card class=\"bg-dark-blue\">\r\n    <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <div fxFlex=\"20\" fxLayoutAlign.xs=\"start start\">\r\n        <img src=\"../../assets/motor_policy.PNG\" alt=\"car img\"/>\r\n      </div>\r\n      <div fxFlex=\"80\">\r\n        <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n          <div fxFlex=\"70\">\r\n            <span class=\"middle-heading text-small\">Motor Third party Liability Policy</span>\r\n          </div>\r\n          <div fxFlex=\"30\" fxLayoutAlign=\"end end\" fxLayoutAlign.xs=\"start end\">\r\n            <div>\r\n              <div class=\"num\">324<span class=\"nearelm\">,00 BGN</span></div>\r\n              <div class=\"text-small\">Four payments</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n  <mat-radio-group (change)=\"check()\" [(ngModel)]=\"selectedPayment\">\r\n    <div fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-between\">\r\n      <div fxFlex=\"25%\" fxLayoutAlign=\"start center\" fxLayoutAlign.xs=\"start start\">\r\n        <label class=\"text-color\">Select payment method</label>\r\n      </div>\r\n      <mat-card fxFlex=\"30%\">\r\n        <mat-card-content fxLayout=\"row\">\r\n          <div fxFlex=\"40%\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10%\">\r\n            <mat-radio-button name=\"payment\" id=\"card\" value=\"card\"></mat-radio-button>\r\n            <div fxLayout=\"column\" fxLayoutGap=\"10%\">\r\n              <img src=\"../../assets/credit-card.PNG\" />\r\n              <div>Credit/Debit</div>\r\n            </div>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n      <mat-card fxFlex=\"30%\">\r\n        <mat-card-content fxLayout=\"row\">\r\n          <div fxFlex=\"40%\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10%\">\r\n            <mat-radio-button name=\"payment\" id=\"epay\" value=\"epay\"></mat-radio-button>\r\n            <div fxLayout=\"column\" fxLayoutGap=\"10%\">\r\n              <img class=\"epaystyle\" src=\"../../assets/e-pay.PNG\"/>\r\n              <div>ePay</div>\r\n            </div>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </mat-radio-group>\r\n</div>\r\n<div *ngIf=\"optradio\">\r\n  <mat-card class=\"payment\">\r\n    <img mat-card-image class=\"img-payment\" src=\"../../assets/user-key.png\" alt=\"info img\"/>\r\n    <mat-card-content>\r\n      <p class=\"text-color cardstyle\">\r\n        If you are not the card holder, you will be asked to sign the policy with e-Signature. If you don't own an e-Signature, please pay with your own card\r\n      </p>\r\n    </mat-card-content>\r\n  </mat-card>\r\n  <mat-card>\r\n    <mat-card-content>\r\n      <mat-checkbox (change)=\"box($event)\" id=\"cbox\" name=\"cbox\"></mat-checkbox>\r\n      I declare I am owner of the card for this payment\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n<button mat-raised-button color=\"primary\" [disabled]=\"enable\" (click)=\"action(); getData()\" id=\"paybtn\" name=\"paybtn\">Buy Policy</button>\r\n<!-- <button (click)=\"ePayBG()\">click</button> -->"
        },
        {
            "name": "PersonalDetailsComponent",
            "id": "component-PersonalDetailsComponent-f76a255d847be847e0b611135f197ead",
            "file": "src/app/components/tab/mtpl-policy/Steps/personal-details/personal-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-personal-details",
            "styleUrls": [
                "./personal-details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./personal-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pcitizen",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "pdob",
                    "line": 24,
                    "type": "Date"
                },
                {
                    "name": "pfirstname",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "pfirstnameeng",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "plastname",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "plastnameeng",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "plnch",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "psurname",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "psurnameeng",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "citizens",
                    "defaultValue": "['Indian', 'American', 'African']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "personalForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "success",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\n\r\n@Component({\r\n  selector: 'app-personal-details',\r\n  templateUrl: './personal-details.component.html',\r\n  styleUrls: ['./personal-details.component.css']\r\n})\r\nexport class PersonalDetailsComponent implements OnInit {\r\n  @Output() OnToggle = new EventEmitter();\r\n  @Output() OnSubmission = new EventEmitter<any>();\r\n\r\n  @Input() plnch: string;\r\n  @Input() pfirstname: string;\r\n  @Input() plastname: string;\r\n  @Input() psurname: string;\r\n\r\n  @Input() pfirstnameeng: string;\r\n  @Input() plastnameeng: string;\r\n  @Input() psurnameeng: string;\r\n  @Input() pcitizen: string;\r\n  @Input() pdob: Date;\r\n  personalForm: FormGroup;\r\n  citizens = ['Indian', 'American', 'African'];\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private GAService: GoogleAnalyticsService,\r\n    private commonDataService: CommonDataService\r\n  ) {}\r\n  success() {\r\n    this.GAService.event('Next Button clicked', 'Personal Details', 'Next');\r\n    this.commonDataService.personalinformation.next(this.personalForm.value);\r\n    this.OnSubmission.emit('Personal Details form is submitted!');\r\n  }\r\n  change = () => {\r\n    if (this.personalForm.valid) {\r\n      this.OnToggle.emit(true);\r\n      this.commonDataService.personalinformation.next(this.personalForm.value);\r\n    } else {\r\n      this.OnToggle.emit(false);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.personalForm = this.formBuilder.group({\r\n      lnch: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]],\r\n      fullname: this.formBuilder.group({\r\n        firstname: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z]*$'),\r\n            Validators.maxLength(20)\r\n          ]\r\n        ],\r\n        lastname: ['', Validators.pattern('^[a-zA-Z]*$')],\r\n        surname: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z]*$'),\r\n            Validators.maxLength(20)\r\n          ]\r\n        ]\r\n      }),\r\n      fullnameeng: this.formBuilder.group({\r\n        firstnameeng: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z]*$'),\r\n            Validators.maxLength(20)\r\n          ]\r\n        ],\r\n        lastnameeng: ['', Validators.pattern('^[a-zA-Z]*$')],\r\n        surnameeng: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z]*$'),\r\n            Validators.maxLength(20)\r\n          ]\r\n        ]\r\n      }),\r\n      citizen: ['', Validators.required],\r\n      birth: ['', Validators.required]\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-key {\r\n  width: 40px;\r\n}\r\nh1 {\r\n  color: rgb(8, 56, 95);\r\n  font-weight: bold;\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n}\r\nlabel {\r\n  color: rgb(8, 56, 95);\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n.panel {\r\n  border-width: thin;\r\n  border-style: solid;\r\n  border-color: yellow;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  margin-bottom: 20px;\r\n}\r\n.error {\r\n  color: red;\r\n}\r\n.line {\r\n  margin-bottom: 10px;\r\n}\r\n@media screen and (max-width: 800px) {\r\n  .line {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 575px) {\r\n  .nextbtn {\r\n    width: 250px;\r\n    margin: auto;\r\n    display: block;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1090px) {\r\n  .col-lg-4 {\r\n    padding: 4px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./personal-details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1><b>Personal Details</b></h1>\r\n<form [formGroup]=\"personalForm\" (submit)=\"success()\">\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\"> \r\n    <label for=\"lnch\"  fxFlex=\"60%\">LNCH</label>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\"> \r\n      <mat-label>LNCH</mat-label>\r\n      <input matInput formControlName=\"lnch\" id=\"lnch\" name=\"lnch\" placeholder=\"Enter LNCH\" (change)=\"change()\" [(ngModel)]=\"plnch\">\r\n        <mat-error *ngIf=\"personalForm.controls.lnch.errors?.required\" class=\"error\">This field is mandatory</mat-error>\r\n        <mat-error *ngIf=\"personalForm.controls.lnch.errors?.pattern\" class=\"error\">Only 10 digit numerical value allowed</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-divider class=\"line\"></mat-divider>\r\n  <div formGroupName=\"fullname\">\r\n    <label class=\"\">Full Name</label><br>\r\n    <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\"> \r\n      <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n        <mat-label>Firstname</mat-label>\r\n        <input matInput id=\"firstname\"  placeholder=\"Enter firstname\" formControlName=\"firstname\" name=\"firstname\" (change)=\"change()\" [(ngModel)]=\"pfirstname\">\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('firstname').errors?.required\" class=\"error\">This field is mandatory</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('firstname').errors?.pattern\" class=\"error\">Only alphabets allowed</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('firstname').errors?.maxlength\" class=\"error\">Max length can be 20 characters</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n        <mat-label>Middlename</mat-label>\r\n        <input matInput  id=\"lastname\"  placeholder=\"Enter middlename\" formControlName=\"lastname\" name=\"lastname\" (change)=\"change()\" [(ngModel)]=\"plastname\">\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('lastname').errors?.pattern\" class=\"error\">Only alphabets allowed</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"31%\" > \r\n        <mat-label>Lastname</mat-label>\r\n        <input matInput id=\"surname\"  placeholder=\"Enter lastname\" formControlName=\"surname\" name=\"suname\" (change)=\"change()\" [(ngModel)]=\"psurname\">\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('surname').errors?.required\" class=\"error\">This field is mandatory</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('surname').errors?.pattern\" class=\"error\">Only alphabets allowed</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullname').get('surname').errors?.maxlength\" class=\"error\">Max length can be 20 characters</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <mat-divider class=\"line\"></mat-divider>\r\n  <div formGroupName=\"fullnameeng\">\r\n    <label>Full Name in English</label><br>\r\n    <div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\"> \r\n      <mat-form-field appearance=\"outline\"  fxFlex=\"31%\">\r\n        <mat-label>Firstname</mat-label>\r\n        <input matInput  id=\"firstnameeng\" placeholder=\"Enter firstname\" formControlName=\"firstnameeng\" name=\"firstnameeng\" (change)=\"change()\" [(ngModel)]=\"pfirstnameeng\">\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('firstnameeng').errors?.required\" class=\"error\">This field is mandatory</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('firstnameeng').errors?.pattern\" class=\"error\">Only alphabets allowed</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('firstnameeng').errors?.maxlength\" class=\"error\">Max length can be 20 characters</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"31%\">\r\n        <mat-label>Middlename</mat-label>\r\n        <input matInput  id=\"lastnameeng\" placeholder=\"Enter middlename\" formControlName=\"lastnameeng\" name=\"lastnameeng\" (change)=\"change()\" [(ngModel)]=\"plastnameeng\">\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('lastnameeng').errors?.pattern\" class=\"error\">Only alphabets allowed</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"outline\"  fxFlex=\"31%\">\r\n        <mat-label>Lastname</mat-label>\r\n        <input matInput id=\"surnameeng\" name=\"surnameeng\" placeholder=\"Enter lastname\" formControlName=\"surnameeng\" (change)=\"change()\"  [(ngModel)]=\"psurnameeng\">\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('surnameeng').errors?.required\" class=\"error\">This field is mandatory</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('surnameeng').errors?.pattern\" class=\"error\">Only alphabets allowed</mat-error>\r\n        <mat-error *ngIf=\"personalForm.get('fullnameeng').get('surnameeng').errors?.maxlength\" class=\"error\">Max length can be 20 characters</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div class=\"panel\"  fxLayout=\"row\" fxLayoutAlign=\"space-between\" >\r\n    <div fxFlex=\"10%\">  \r\n      <img class=\"user-key\" src=\"../../assets/excl.jpg\" alt=\"warning symbol\">\r\n    </div>\r\n    <div fxFlex=\"80%\">\r\n    Please compare data in latin with data in vehicle registration certificate or identity document.Data will be used for printout of Green Card Certificate.\r\n    </div>\r\n  </div>\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\"> \r\n    <label for=\"citizen\" fxFlex=\"60%\">Citizenship</label>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n      <mat-label>Citizenship</mat-label>\r\n      <mat-select  id=\"citizen\"  formControlName=\"citizen\" name=\"citizen\" (selectionChange)=\"change()\" [(ngModel)]=\"pcitizen\">\r\n        <mat-option selected disabled value=\"\">--SELECT--</mat-option>\r\n        <mat-option *ngFor=\"let c of citizens\" [value]=\"c\">{{c}}</mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"personalForm.controls.citizen.errors?.required\">Please select your Citizenship</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-divider class=\"line\"></mat-divider>\r\n  <div fxLayout=\"row\" fxLayout.lt-lg=\"column\"> \r\n    <label for=\"birth\" fxFlex=\"60%\" >Birth Date</label>\r\n    <mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n      <mat-label>DateOfBirth</mat-label>\r\n      <input  matInput [matDatepicker]=\"picker\" id=\"birth\" placeholder=\"Enter Birth date\" formControlName=\"birth\" name=\"birth\" (dateChange)=\"change()\" [ngModel]=\"pdob | date: 'yyyy-MM-dd'\">\r\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n        <mat-datepicker touchUi #picker></mat-datepicker>\r\n      <mat-error *ngIf=\"personalForm.controls.birth.errors?.required\" class=\"error\">Please select your birth date </mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n  <mat-divider class=\"line\"></mat-divider>\r\n  <button  mat-raised-button matStepperNext color=\"primary\" type=\"submit\" id=\"personalbtn\" name=\"personalbtn\" class=\"rounded-pill  col-sm-4 col-lg-2 col-md-3 nextbtn\" [disabled]=\"!personalForm.valid\">Next</button>\r\n</form>\r\n"
        },
        {
            "name": "PolicyDetailsComponent",
            "id": "component-PolicyDetailsComponent-e8f3e665d118f8a8b3008aeb8e763f32",
            "file": "src/app/components/tab/mtpl-calculator/Steps/policy-details/policy-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-policy-details",
            "styleUrls": [
                "./policy-details.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./policy-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "policyDateSelected",
                    "line": 14,
                    "type": "Date"
                },
                {
                    "name": "policyLengthEntered",
                    "line": 15,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "Submission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "Toggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "day",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mindate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "month",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "policyLength",
                    "defaultValue": "[\r\n{ value: 1, name: '1 Month' },\r\n{ value: 3, name: '3 Months' },\r\n{ value: 6, name: '6 Months' },\r\n{ value: 12, name: '12 Months' },\r\n]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "todaydate",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\n\r\n@Component({\r\nselector: 'app-policy-details',\r\ntemplateUrl: './policy-details.component.html',\r\nstyleUrls: ['./policy-details.component.css'],\r\n})\r\nexport class PolicyDetailsComponent implements OnInit {\r\n@Output() Toggle = new EventEmitter();\r\n@Output() Submission = new EventEmitter<any>();\r\n@Input() policyDateSelected: Date;\r\n@Input() policyLengthEntered: number;\r\nregisterForm: FormGroup;\r\ntodaydate = new Date();\r\nday = '';\r\nmonth = '';\r\nmindate = '';\r\npolicyLength = [\r\n{ value: 1, name: '1 Month' },\r\n{ value: 3, name: '3 Months' },\r\n{ value: 6, name: '6 Months' },\r\n{ value: 12, name: '12 Months' },\r\n];\r\n\r\nconstructor(private formBuilder: FormBuilder, private commonDataService: CommonDataService,\r\n            private GAService: GoogleAnalyticsService\r\n) {}\r\n\r\nngOnInit() {\r\nthis.registerForm = this.formBuilder.group({\r\npolicyDate: ['', Validators.required],\r\npolicyLength: ['', Validators.required],\r\ncheck1: ['', Validators.requiredTrue],\r\ncheck2: ['', Validators.requiredTrue],\r\n});\r\n// Disable dates before todays date on datepicker\r\nthis.todaydate.setDate(this.todaydate.getDate() + 1);\r\nif (this.todaydate.getMonth() + 1 < 10) {\r\nthis.month = '0' + (this.todaydate.getMonth() + 1);\r\n}\r\nelse {\r\nthis.month = '' + (this.todaydate.getMonth() + 1);\r\n}\r\nif (this.todaydate.getDate() < 10) {\r\nthis.day = '0' + this.todaydate.getDate();\r\n} else {\r\nthis.day = '' + this.todaydate.getDate();\r\n}\r\nthis.mindate =\r\n'' + this.todaydate.getFullYear() + '-' + this.month + '-' + this.day;\r\n}\r\nsubmit = () => {\r\nthis.GAService.event('Calculate Button clicked', 'Policy Details', 'Calculate'\r\n);\r\n\r\nthis.commonDataService.policy.next(this.registerForm.value);\r\nthis.Submission.emit('Policy Details form is submitted!');\r\n}\r\n\r\nchange = () => {\r\nif (this.registerForm.valid) {\r\nthis.Toggle.emit(true);\r\nthis.commonDataService.policy.next(this.registerForm.value);\r\n} else {\r\nthis.Toggle.emit(false);\r\n}\r\n}\r\n\r\nget formControls() {\r\nreturn this.registerForm.controls;\r\n}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Heading styling */\r\n.heading {\r\n\tcolor: rgb(8, 56, 95);\r\n\tfont-family: \"Trebuchet MS\", \"Lucida Sans Unicode\", \"Lucida Grande\",\r\n\t\t\"Lucida Sans\", Arial, sans-serif;\r\n\tfont-weight: bold;\r\n}\r\n/* form styling */\r\n.form_elements_color {\r\n\tcolor: rgb(8, 56, 95);\r\n}\r\n@media screen and (max-width: 768px) {\r\n\t.line {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n@media screen and (max-width: 575px) {\r\n\t.btn {\r\n\t\twidth: 250px;\r\n\t\tmargin: auto;\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./policy-details.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControls": {
                    "name": "formControls",
                    "getSignature": {
                        "name": "formControls",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            },
            "templateData": "<!-- heading section -->\r\n<h1 class=\"heading\">Policy Details</h1>\r\n<!-- policy details form and form fields -->\r\n<form [formGroup]=\"registerForm\" (submit)=\"submit()\" class=\"form_elements_color\"\r\n>\r\n\t<br />\r\n\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lg=\"space-between center\"\r\n\t>\r\n\t\t<mat-label for=\"city\" fxFlex=\"40%\" fxHide.xs>Start Date</mat-label>\r\n\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t<mat-label>Start Date</mat-label>\r\n\t\t\t<input id=\"policydate\" matInput [matDatepicker]=\"picker\" formControlName=\"policyDate\" (dateChange)=\"change()\" [min]=\"mindate\"\r\n\t\t\t/>\r\n\t\t\t<mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n\t\t\t<mat-datepicker touchUi #picker></mat-datepicker>\r\n\t\t\t<mat-error *ngIf=\"formControls.policyDate.hasError('required')\">\r\n\t\t\t\tThis field is mandatory\r\n\t\t\t</mat-error>\r\n\t\t</mat-form-field>\r\n\t</div>\r\n\t<mat-divider></mat-divider>\r\n\t<br />\r\n\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign.lg=\"space-between center\"\r\n\t>\r\n\t\t<mat-label for=\"city\" fxFlex=\"40%\" fxHide.xs>Policy Length</mat-label>\r\n\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t<mat-label>Policy Length</mat-label>\r\n\t\t\t<mat-select formControlName=\"policyLength\" (selectionChange)=\"change()\">\r\n\t\t\t\t<mat-option>None</mat-option>\r\n\t\t\t\t<mat-option\r\n\t\t\t\t\t*ngFor=\"let length of policyLength\"\r\n\t\t\t\t\t[value]=\"length.value\"\r\n\t\t\t\t\t>{{ length.name }}</mat-option\r\n\t\t\t\t>\r\n\t\t\t</mat-select>\r\n\t\t\t<mat-error *ngIf=\"formControls.policyLength.hasError('required')\">\r\n\t\t\t\tThis field is mandatory\r\n\t\t\t</mat-error>\r\n\t\t</mat-form-field>\r\n\t</div>\r\n\t<mat-divider></mat-divider>\r\n\t<br />\r\n\t<mat-card>\r\n\t\t<mat-card-content>\r\n\t\t\t<mat-checkbox formControlName=\"check1\" (change)=\"change()\"></mat-checkbox>\r\n\t\t\tI have read and accepted \"Personal Data Protection Information\"\r\n\t\t</mat-card-content>\r\n\t</mat-card>\r\n\t<mat-error\r\n\t\t*ngIf=\"formControls.check1.touched && formControls.check1.errors && formControls.check1.invalid\r\n\t\t\"\r\n\t>\r\n\t\tThis field is mandatory\r\n\t</mat-error>\r\n\t<br />\r\n\t<mat-card>\r\n\t\t<mat-card-content>\r\n\t\t\t<mat-checkbox formControlName=\"check2\" (change)=\"change()\"></mat-checkbox>\r\n\t\t\tI have read the \"Motor Insurance Third Party Liability Insurance Document\"\r\n\t\t</mat-card-content>\r\n\t</mat-card>\r\n\t<mat-error\r\n\t\t*ngIf=\"formControls.check2.touched && formControls.check2.errors && formControls.check2.invalid\r\n\t\t\"\r\n\t>\r\n\t\tThis field is mandatory\r\n\t</mat-error>\r\n\t<br />\r\n\t<button mat-raised-button color=\"primary\" matStepperNext [disabled]=\"!registerForm.valid\"\r\n\t>\r\n\t\tCalculate\r\n\t</button>\r\n</form>\r\n"
        },
        {
            "name": "ProgressSpinnerComponent",
            "id": "component-ProgressSpinnerComponent-59e1aed2c949c92f29eec6c5ec975c24",
            "file": "src/app/components/shared/progress-spinner/progress-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-spinner",
            "styleUrls": [
                "./progress-spinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-progress-spinner',\r\n  templateUrl: './progress-spinner.component.html',\r\n  styleUrls: ['./progress-spinner.component.css']\r\n})\r\nexport class ProgressSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {display: inline-block;}\r\n",
                    "styleUrl": "./progress-spinner.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-spinner></mat-spinner>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-5bfa24e21aec42768a6a3385ae2b8609",
            "file": "src/app/components/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "confirmPassword",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "email",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "fullName",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "mobile",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "password",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "hide1",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "passwordValidator",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "register",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "signUpForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Overlay } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ProgressSpinnerComponent } from '../shared/progress-spinner/progress-spinner.component';\r\nimport { SignUpService } from './sign-up.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.css'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  @Input() fullName: string;\r\n  @Input() email: string;\r\n  @Input() password: string;\r\n  @Input() confirmPassword: string;\r\n  @Input() mobile: number;\r\n  signUpForm: FormGroup;\r\n  errorMessage: string;\r\n  hide = true;\r\n  hide1 = true;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private signUpService: SignUpService,\r\n    private overlay: Overlay\r\n  ) {}\r\n\r\n  // validators for form elements\r\n  ngOnInit(): void {\r\n    this.signUpForm = this.fb.group(\r\n      {\r\n        email: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.pattern(\r\n              /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/\r\n            ),\r\n          ],\r\n        ],\r\n\r\n        password: ['', [Validators.required]],\r\n        confirmPassword: ['', [Validators.required]],\r\n        mobile: [\r\n          '',\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(10),\r\n            Validators.maxLength(10),\r\n          ],\r\n        ],\r\n      },\r\n      { validator: this.passwordValidator }\r\n    );\r\n  }\r\n\r\n  // user registration function\r\n  register = () => {\r\n    const overlayRef = this.overlay.create({\r\n      positionStrategy: this.overlay\r\n        .position()\r\n        .global()\r\n        .centerHorizontally()\r\n        .centerVertically(),\r\n      hasBackdrop: true,\r\n    });\r\n    overlayRef.attach(new ComponentPortal(ProgressSpinnerComponent));\r\n    this.signUpService.registerUser(this.signUpForm.value).subscribe(\r\n      (res) => {\r\n        overlayRef.detach();\r\n        const response = JSON.parse(JSON.stringify(res));\r\n        alert('You are registered Succussfully');\r\n        setTimeout(() => {\r\n          this.router.navigate(['/signIn']);\r\n        });\r\n      },\r\n\r\n      (err) => {\r\n        overlayRef.detach();\r\n        this.errorMessage = err.error.error.errors[0].message;\r\n        alert(this.errorMessage)\r\n      }\r\n    );\r\n  };\r\n\r\n  // password validation function\r\n  passwordValidator = (c: AbstractControl) => {\r\n    const password = c.get('password');\r\n    const confirmPassword = c.get('confirmPassword');\r\n\r\n    if (password.pristine || confirmPassword.pristine) {\r\n      return null;\r\n    } else {\r\n      if (password.value !== confirmPassword.value) {\r\n        c.get('confirmPassword').setErrors({ misMatch: true });\r\n      } else {\r\n        c.get('confirmPassword').setErrors(null);\r\n      }\r\n      return password.value !== confirmPassword.value\r\n        ? { misMatch: true }\r\n        : null;\r\n    }\r\n  };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n/* Heading color */\r\n.heading {\r\n\tcolor: #3700b3;\r\n}\r\n",
                    "styleUrl": "./sign-up.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "signUpService",
                        "type": "SignUpService"
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signUpService",
                        "type": "SignUpService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutGap=\"5%\">\r\n <div fxFlex=\"10%\"></div>\r\n <div fxFlex=\"30%\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\">\r\n   <div fxFlex.gt-xs=\"40%\">\r\n    <mat-card>\r\n     <mat-card-content>\r\n      <div fxLayout=\"column\" fxLayoutWrap fxLayoutGap=\"0.5%\" fxLayoutAlign=\"center stretch\">\r\n       <div fxFlex=\"40%\">\r\n        <h1 class=\"heading\" fxLayoutAlign=\"center\">Sign Up</h1>\r\n        <form fxLayout=\"column\" fxLayoutAlign=\"center\" [formGroup]=\"signUpForm\">\r\n         <mat-form-field appearance=\"outline\">\r\n          <mat-label>Email</mat-label>\r\n          <input matInput placeholder=\"Email\" id=\"email\" name=\"email\" formControlName=\"email\" />\r\n          <mat-error *ngIf=\"signUpForm.controls.email.errors?.required\">Required</mat-error>\r\n          <mat-error *ngIf=\"signUpForm.controls.email.errors?.pattern\">enter valid emailId</mat-error>\r\n         </mat-form-field>\r\n         <mat-form-field appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input matInput placeholder=\"Password\" id=\"password\" name=\"password\" formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\"\r\n          />\r\n          <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\"\r\n          >\r\n           <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n          </button>\r\n          <mat-error *ngIf=\"signUpForm.controls.password.errors?.required\">Required</mat-error>\r\n         </mat-form-field>\r\n         <mat-form-field appearance=\"outline\">\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input matInput placeholder=\"Confirm Password\" id=\"confirmPassword\" name=\"confirmPassword\" formControlName=\"confirmPassword\" [type]=\"hide1 ? 'password' : 'text'\"\r\n          />\r\n          <button mat-icon-button matSuffix (click)=\"hide1 = !hide1\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\"\r\n          >\r\n           <mat-icon>{{ hide1 ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n          </button>\r\n          <mat-error *ngIf=\"signUpForm.controls.confirmPassword.errors?.required\">Required</mat-error>\r\n          <mat-error\r\n           *ngIf=\"\r\n            signUpForm.controls.confirmPassword.errors?.misMatch &&\r\n            !signUpForm.controls.confirmPassword.errors?.required &&\r\n            signUpForm.controls.confirmPassword.dirty &&\r\n            signUpForm.controls.confirmPassword.touched\r\n           \"\r\n           >Password did not match</mat-error\r\n          >\r\n         </mat-form-field>\r\n         <mat-form-field appearance=\"outline\">\r\n          <mat-label>Phone No.</mat-label>\r\n          <input matInput placeholder=\"Phone No.\" id=\"mobile\" name=\"mobile\" formControlName=\"mobile\" />\r\n          <mat-error *ngIf=\"signUpForm.controls.mobile.errors?.required\">Required</mat-error>\r\n          <mat-error\r\n           *ngIf=\"signUpForm.controls.mobile.errors?.minlength || signUpForm.controls.mobile.errors?.maxlength\"\r\n           >Enter valid phone No.</mat-error\r\n          >\r\n         </mat-form-field>\r\n\r\n         <button color=\"primary\" mat-raised-button (click)=\"register()\" value=\"Login\" [disabled]=\"!signUpForm.valid\">\r\n          Register\r\n         </button>\r\n        </form>\r\n        <div fxLayoutAlign=\"center\">\r\n         Already have an account?\r\n         <a [routerLink]=\"['/signIn']\">Sign in</a>\r\n        </div>\r\n       </div>\r\n      </div>\r\n     </mat-card-content>\r\n    </mat-card>\r\n   </div>\r\n  </div>\r\n </div>\r\n</div>\r\n"
        },
        {
            "name": "SummaryComponent",
            "id": "component-SummaryComponent-9e84aba71b8b4111ccaf18e62fb0d01a",
            "file": "src/app/components/tab/mtpl-policy/Steps/summary/summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-summary",
            "styleUrls": [
                "./summary.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "AdditionalCovers",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "changeStep",
                    "defaultValue": "new EventEmitter()",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "Delivery",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "Installment",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 36,
                    "type": "EventEmitter"
                },
                {
                    "name": "InsuringParty",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "moveTab",
                    "defaultValue": "new EventEmitter()",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "PolicyDates",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "VehicleInfo",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 38,
                    "type": "EventEmitter"
                },
                {
                    "name": "VehicleOwner",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "additionalcovers",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "contactinformation",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "deliveryinformation",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "edit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "installment",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "installmentData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "insuringparty",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "moveToCalculator",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "mplPolicyData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mtplCalculatorData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "personalinformation",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "policy",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "saveData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "summaryForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "vehicleinfo",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "vehicleownerinformation",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\nimport { MtplCalculatorService } from '../../../mtpl-calculator/mtpl-calculator.service';\r\nimport { MtplPolicyService } from '../../mtpl-policy.service';\r\n\r\n@Component({\r\nselector: 'app-summary',\r\ntemplateUrl: './summary.component.html',\r\nstyleUrls: ['./summary.component.css'],\r\n})\r\nexport class SummaryComponent implements OnInit {\r\nconstructor(\r\n  private fb: FormBuilder,\r\n  private commonDataService: CommonDataService,\r\n  private mtplCalculatorService: MtplCalculatorService,\r\n  private mtplPolicyService: MtplPolicyService\r\n  ) {}\r\n\r\nsummaryForm: FormGroup;\r\nmtplCalculatorData;\r\nmplPolicyData;\r\ninstallmentData;\r\nvehicleinfo;\r\ninsuringparty;\r\npolicy;\r\ninstallment;\r\nadditionalcovers;\r\ncontactinformation;\r\ndeliveryinformation;\r\npersonalinformation;\r\nvehicleownerinformation;\r\n\r\n@Output() changeStep = new EventEmitter();\r\n@Output() moveTab = new EventEmitter();\r\n@Output() Installment = new EventEmitter<any>();\r\n@Output() AdditionalCovers = new EventEmitter<any>();\r\n@Output() VehicleInfo = new EventEmitter<any>();\r\n@Output() InsuringParty = new EventEmitter<any>();\r\n@Output() VehicleOwner = new EventEmitter<any>();\r\n@Output() Delivery = new EventEmitter<any>();\r\n@Output() PolicyDates = new EventEmitter<any>();\r\n// redirect to MTPL calculator's respective page on clicking edit button\r\nmoveToCalculator = (index) => {\r\nthis.moveTab.emit(index);\r\nif (index === 0) {\r\nthis.VehicleInfo.emit('Vehicle edit button clicked');\r\n}\r\nif (index === 1) {\r\nthis.InsuringParty.emit('Insuring Party edit button clicked');\r\n}\r\nif (index === 2) {\r\nthis.PolicyDates.emit('Policy Dates edit button clicked');\r\n}\r\nif (index === 3) {\r\nthis.Installment.emit('Installment edit button clicked');\r\n}\r\nif (index === 4) {\r\nthis.AdditionalCovers.emit('Additional Covers edit button clicked');\r\n}\r\n}\r\n// on page load we will get data of all pages from commonDataService\r\nngOnInit(): void {\r\nthis.commonDataService.vehicleinfo.subscribe((data) => {\r\nthis.vehicleinfo = data;\r\n});\r\nthis.commonDataService.insuringparty.subscribe((data) => {\r\nthis.insuringparty = data;\r\n});\r\nthis.commonDataService.policy.subscribe((data) => {\r\nthis.policy = data;\r\n});\r\nthis.commonDataService.installment.subscribe((data) => {\r\nthis.installment = data;\r\n});\r\nthis.commonDataService.additionalcovers.subscribe((data) => {\r\nthis.additionalcovers = data;\r\n});\r\nthis.commonDataService.contactinformation.subscribe((data) => {\r\nthis.contactinformation = data;\r\n});\r\nthis.commonDataService.deliveryinformation.subscribe((data) => {\r\nthis.deliveryinformation = data;\r\n});\r\nthis.commonDataService.personalinformation.subscribe((data) => {\r\nthis.personalinformation = data;\r\n});\r\nthis.commonDataService.vehicleownerinformation.subscribe((data) => {\r\nthis.vehicleownerinformation = data;\r\n});\r\n\r\nthis.summaryForm = this.fb.group({\r\nAgreeToAll: [false, Validators.requiredTrue],\r\nreceiveNewsletter: [false, Validators.requiredTrue],\r\ngeneralTerms: [false, Validators.requiredTrue],\r\n});\r\n}\r\n// Redirect to MTPL policy's respective page on clicking edit button\r\nedit = (index) => {\r\nif (index === 2) {\r\nthis.VehicleOwner.emit('Vehicle owner edit button clicked');\r\n}\r\nif (index === 3) {\r\nthis.Delivery.emit('Delivery edit button clicked');\r\n}\r\nthis.changeStep.emit(index);\r\n}\r\n// Data will be saved and user will redirect to payment page\r\nsaveData = () => {\r\nconfirm('You are about to save data and proceed to payment');\r\nconst mtplCalculator = {\r\nid: sessionStorage.getItem('id'),\r\nvehicleinfo: this.vehicleinfo,\r\ninsuringparty: this.insuringparty,\r\npolicy: this.policy,\r\ninstallment: this.installment,\r\nadditionalcovers: this.additionalcovers,\r\n};\r\nconst mtplPolicy = {\r\nid: sessionStorage.getItem('id'),\r\ncontactinformation: this.contactinformation,\r\ndeliveryinformation: this.deliveryinformation,\r\npersonalinformation: this.personalinformation,\r\nvehicleownerinformation: this.vehicleownerinformation,\r\n};\r\nthis.mtplCalculatorService.postData(mtplCalculator).subscribe(\r\n(res) => {},\r\n(err) => {}\r\n);\r\nthis.mtplPolicyService.postData(mtplPolicy).subscribe(\r\n(res) => {},\r\n(err) => {}\r\n);\r\n}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Styles label with specific color and size */\r\n.label_prop {\r\n\tcolor: rgb(8, 56, 95);\r\n\tfont-family: \"Trebuchet MS\", Arial, sans-serif;\r\n\tfont-weight: bold;\r\n\tfont-size: 15px;\r\n\tmargin-left: 1rem;\r\n}\r\n.heading {\r\n\tcolor: rgb(8, 56, 95);\r\n\tfont-family: \"Trebuchet MS\", Arial, sans-serif;\r\n\tfont-weight: bold;\r\n}\r\n/* Styles button with proper margin */\r\n.btn {\r\n\tfloat: right;\r\n}\r\n\r\n/* Styles card with specific background color */\r\n.card_color {\r\n\tbackground-color: rgb(8, 56, 95);\r\n\tcolor: white;\r\n}\r\n\r\n.div_prop {\r\n\tfont-size: 30px;\r\n\tfont-weight: bold;\r\n}\r\n.span_prop {\r\n\tfont-size: 20px;\r\n}\r\n\r\n.error_color{\r\n\tcolor:red;\r\n}\r\n/* styles image with specific alignment and text with color */\r\n.tick {\r\n\twidth: 30px;\r\n\theight: 20px;\r\n\tmargin-left: 0rem;\r\n}\r\n.text_prop {\r\n\tcolor: rgb(8, 56, 95);\r\n}\r\n/* styles sub headings with specific font size and color */\r\n.sub_label_prop {\r\n\tfont-size: small;\r\n\tcolor: rgb(8, 56, 95);\r\n}\r\n/* Allign components data properly */\r\n.vehicle_comp {\r\n\tmargin-left: -1rem;\r\n}\r\n\r\n.insuring_party {\r\n\tmargin-left: -1rem;\r\n}\r\n\r\n.vehicle_owner {\r\n\tmargin-left: -1rem;\r\n}\r\n\r\n.delivery_comp {\r\n\tmargin-left: -2rem;\r\n}\r\n/*Provide alignmnet to note section */\r\n.panel {\r\n\tborder-width: thin;\r\n\tborder-style: solid;\r\n\tborder-color: orange;\r\n\tborder-radius: 5px;\r\n\tpadding: 25px;\r\n\tmargin-bottom: 20px;\r\n}\r\nmat-card {\r\n\tborder: none;\r\n}\r\n/* Align notes image */\r\n.user-key {\r\n\twidth: 40px;\r\n\tposition: absolute;\r\n\tz-index: 1;\r\n\ttop: 15px;\r\n\tleft: -25px;\r\n}\r\n/* aligns text in center */\r\n.middle_text {\r\n\tmargin-top: 15px;\r\n\tmargin-left: -10px;\r\n}\r\n/* styles edit button */\r\n.edit {\r\n\ttext-decoration: underline;\r\n\tcolor: rgb(43, 168, 226);\r\n}\r\n/* checkbox text sizing */\r\n.checkbox_text {\r\n\tfont-size: 1vw;\r\n}\r\n/* styles button at bottom */\r\n.btn_prop {\r\n\tborder: none;\r\n\tborder-radius: 2rem;\r\n}\r\n\r\n/* For extra small screen */\r\n@media screen and (max-width: 600px) {\r\n\t.middle_text {\r\n\t\tmargin-left: 0px;\r\n\t\tmargin-top: 2px;\r\n\t\tfont-size: 18px;\r\n\t}\r\n\r\n\t.div_prop {\r\n\t\tmax-width: 7rem;\r\n\t\tfont-size: 20px;\r\n\t}\r\n\r\n\t.span_prop {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\t.tick {\r\n\t\tmargin-left: -1rem;\r\n\t}\r\n\t.pay_margin {\r\n\t\tmargin-left: 0rem;\r\n\t}\r\n\t.checkbox_text {\r\n\t\tfont-size: 3vw;\r\n\t}\r\n\t.btn {\r\n\t\tfloat: left;\r\n\t\tmargin-left: 5rem;\r\n\t}\r\n}\r\n/* For small screen */\r\n@media screen and (min-width: 600px) and (max-width: 960px) {\r\n\t.middle_text {\r\n\t\tmargin-left: -3rem;\r\n\t\tfont-size: 20px;\r\n\t}\r\n\r\n\t.span_prop {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\t.checkbox_text {\r\n\t\tfont-size: 2vw;\r\n\t}\r\n\t.pay_margin {\r\n\t\tmax-width: 10%;\r\n\t}\r\n\t.btn {\r\n\t\tmargin-left: 4rem;\r\n\t\tfloat: right;\r\n\t}\r\n}\r\n\r\n/*for medium screens*/\r\n@media screen and (min-width: 960px) and (max-width: 1280) {\r\n\t.btn {\r\n\t\tmargin-left: 20px;\r\n\t\tfloat: right;\r\n\t}\r\n\r\n\t.tick {\r\n\t\tmargin-left: 1rem;\r\n\t}\r\n\t.text_prop {\r\n\t\tmargin-left: -3rem;\r\n\t}\r\n\t.chechbox_text {\r\n\t\tfont-size: 2vw;\r\n\t}\r\n\t.btn {\r\n\t\tmargin-left: 2rem;\r\n\t\tmargin-left: auto;\r\n\t}\r\n\t.middle_text {\r\n\t\tmargin-left: -3rem;\r\n\t\tfont-size: 18px;\r\n\t}\r\n}\r\n/* for large screen */\r\n@media screen and (min-width: 1280px) {\r\n\t.tick {\r\n\t\tmargin-left: 1rem;\r\n\t}\r\n\t.text_prop {\r\n\t\tmargin-left: 0rem;\r\n\t}\r\n\t.checkbox_text {\r\n\t\tfont-size: 15px;\r\n\t}\r\n\t.btn {\r\n\t\tfloat: right;\r\n\t}\r\n\t.middle_text {\r\n\t\tmargin-left: -5rem;\r\n\t\tfont-size: 18px;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./summary.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    },
                    {
                        "name": "mtplCalculatorService",
                        "type": "MtplCalculatorService"
                    },
                    {
                        "name": "mtplPolicyService",
                        "type": "MtplPolicyService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mtplCalculatorService",
                        "type": "MtplCalculatorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mtplPolicyService",
                        "type": "MtplPolicyService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n</head>\r\n\r\n<body>\r\n    <div fxLayout=\"row\">\r\n        <div fxFlex=\"20%\">\r\n            <h1 class=\"heading\">Proposal</h1>\r\n        </div>\r\n        <div fxFlex=\"80%\" fxFlex.xs=\"20%\">\r\n            <button mat-stroked-button color=\"primary\" class=\"btn\">\r\n                send to email\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <mat-card class=\"card_color\">\r\n        <div fxLayout=\"row\">\r\n            <div fxFlex=\"20%\" fxFlex.xs=\"27%\" fxFlex.sm=\"10%\" fxLayoutGap.sm=\"1%\" fxLayoutGap.xs=\"10%\">\r\n                <img src=\"../../../assets/motor_policy.PNG\" alt=\"a car image\" />\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\" fxFlex=\"100%\" fxLayoutGap.xs=\"4%\">\r\n                <div fxFlex=\"60%\" fxFlex.xs=\"40%\" fxFlex.sm=\"60%\" fxLayoutAlign=\"center\">\r\n                    <span class=\"middle_text\">Motor Third Party Liability Policy</span>\r\n                </div>\r\n                <div fxFlex.xs=\"30%\" fxFlex=\"40%\" fxFlex.sm=\"25%\" class=\"pay_margin\">\r\n                    <div class=\"div_prop\">324<span class=\"span_prop\">,00BGN</span></div>\r\n                    <div>Fourth payment</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mat-card><br />\r\n\r\n    <mat-card fxLayoutGap=\"10px\">\r\n        <div fxLayout=\"row\">\r\n            <div fxFlex=\"10%\">\r\n                <img src=\"../../../assets/tick.jpg\" class=\"tick\" alt=\"green tick mark image\" />\r\n            </div>\r\n            <div fxFlex=\"80%\">\r\n                <p class=\"text_prop\">\r\n                    Premium indicated are final and include Contribution to the Gaurantee and Insurance Fund, stickers\r\n                    and 2% tax on insurance payment.\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\">\r\n            <div fxFlex=\"10%\">\r\n                <img src=\"../../../assets/tick.jpg\" class=\"tick\" alt=\"green tick mark image\" />\r\n            </div>\r\n            <div fxFlex=\"80%\">\r\n                <p class=\"text_prop\">\r\n                    The insurance payment is calculated with included - 5% discount for insurance with Casco\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\">\r\n            <div fxFlex=\"10%\">\r\n                <img src=\"../../../assets/tick.jpg\" class=\"tick\" alt=\"green tick mark image\" />\r\n            </div>\r\n            <div fxFlex=\"80%\">\r\n                <p class=\"text_prop\">Annual Technical Inspection Voucher</p>\r\n            </div>\r\n        </div>\r\n    </mat-card><br />\r\n    <!-- Display other components data -->\r\n    <form [formGroup]=\"summaryForm\">\r\n        <mat-card>\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Instalments</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"moveToCalculator(3)\" id=\"edit\" name=\"edit\">\r\n                    Edit\r\n                </button>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"25%\" *ngFor=\"let ele of installment.installments; let indexOfEle = index\">\r\n                    <mat-label class=\"sub_label_prop\">{{ indexOfEle + 1 | ordinal }} Installment</mat-label>\r\n                    <div>{{ ele }}</div>\r\n                </div>\r\n            </div>\r\n        </mat-card><br />\r\n\r\n        <mat-card>\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Additional Covers</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"moveToCalculator(4)\" id=\"coveredit\" name=\"coveredit\">\r\n                    Edit\r\n                </button>\r\n            </div>\r\n            <div>\r\n                <mat-label>{{ additionalcovers.cover }}</mat-label>\r\n            </div>\r\n        </mat-card><br />\r\n\r\n        <mat-card style=\"border: none;\">\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Policy Dates</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"moveToCalculator(2)\" id=\"dateedit\" name=\"dateedit\">\r\n                    Edit\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"row\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Start Date</mat-label><br />\r\n                    <div>{{ policy.policyDate }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">End Date</mat-label><br />\r\n                </div>\r\n            </div>\r\n            <br />\r\n        </mat-card><br />\r\n\r\n        <mat-card>\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Vehicle</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"moveToCalculator(0)\" id=\"vehicledit\" name=\"vehicledit\">\r\n                    Edit\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Vehicle Registration Number</mat-label>\r\n                    <div>{{ vehicleinfo.registrationNumber }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Vehicle Certification Number</mat-label>\r\n                    <div>{{ vehicleinfo.certificateNumber }}</div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Vehicle Purpose</mat-label>\r\n                    <div>{{ vehicleinfo.purpose }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Driven outside bulgaria for more than 60 days</mat-label>\r\n                    <div>{{ vehicleinfo.yesNo }}</div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            <mat-card class=\"panel\">\r\n                <img class=\"user-key\" src=\"../../assets/edit.jpg\" alt=\"a pen image with yellow background\" />\r\n                Casco has an active policy for the same vehicle with different data.The change in the data will be\r\n                reflacted in an\r\n                annex. The annex will be sent to you by courier/ email or will be provided for signing by e-signature.\r\n            </mat-card>\r\n        </mat-card><br />\r\n\r\n        <mat-card>\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Insuring Party</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"moveToCalculator(1)\" id=\"partyedit\" name=\"partyedit\">\r\n                    Edit\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">ENG/ELK/LNCH Number</mat-label>\r\n                    <div>{{ insuringparty.egn }}</div>\r\n                </div>\r\n\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">City and zipcode</mat-label><br />\r\n                    <div>{{ contactinformation.city }} {{ contactinformation.pincode }}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Full Name</mat-label>\r\n                    <div>\r\n                        {{ personalinformation.fullname.firstname }}\r\n                        {{ personalinformation.fullname.lastname }}\r\n                        {{ personalinformation.fullname.surname }}\r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">street & Number</mat-label><br />\r\n                    <div>\r\n                        {{ vehicleownerinformation.street }}\r\n                        {{ vehicleownerinformation.No }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Phone Number</mat-label>\r\n                    <div>{{ contactinformation.phone }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Apartment</mat-label><br />\r\n                    <div>{{ contactinformation.appartment }}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Email</mat-label>\r\n                    <div>{{ insuringparty.email }}</div>\r\n                </div>\r\n            </div>\r\n        </mat-card><br />\r\n\r\n        <mat-card>\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Vehicle Owner</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"edit(2)\">Edit</button>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">EGN/ELK/LNCH Number</mat-label><br />\r\n                    <div>{{ vehicleownerinformation.lnch }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">city & zipcode</mat-label>\r\n                    <div>{{ vehicleownerinformation.city }}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Full Name</mat-label><br />\r\n                    <div>{{ vehicleownerinformation.fullname.firstname }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">street & Number</mat-label><br />\r\n                    <div>\r\n                        {{ vehicleownerinformation.street }}\r\n                        {{ vehicleownerinformation.No }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </mat-card><br />\r\n\r\n        <mat-card>\r\n            <div fxLayout=\"row\">\r\n                <mat-label class=\"label_prop\">Delivery</mat-label>\r\n                <button mat-button color=\"primary\" (click)=\"edit(3)\">Edit</button>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Full Name</mat-label>\r\n                    <div>{{ deliveryinformation.fullName }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">City and zipcode</mat-label>\r\n                    <div>\r\n                        {{ deliveryinformation.city }} and\r\n                        {{ deliveryinformation.pincode }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Phone Number</mat-label>\r\n                    <div>{{ deliveryinformation.contact }}</div>\r\n                </div>\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Street & Number</mat-label>\r\n                    <div>\r\n                        {{ deliveryinformation.street }} and\r\n                        {{ deliveryinformation.number }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\" fxLayout.xs=\"column\">\r\n                <div fxFlex=\"50%\">\r\n                    <mat-label class=\"sub_label_prop\">Address Type</mat-label>\r\n                    <div>{{ deliveryinformation.business }}</div>\r\n                </div>\r\n                <div fxFlex=\"10%\">\r\n                    <mat-label class=\"sub_label_prop\">Block</mat-label>\r\n                    <div>{{ deliveryinformation.block }}</div>\r\n                </div>\r\n                <div fxFlex=\"10%\">\r\n                    <mat-label class=\"sub_label_prop\">Apartment</mat-label>\r\n                    <div>{{ deliveryinformation.appt }}</div>\r\n                </div>\r\n            </div>\r\n        </mat-card><br />\r\n\r\n        <mat-card>\r\n            <mat-checkbox formControlName=\"AgreeToAll\">\r\n                <div class=\"checkbox_text\">Agree to all</div>\r\n            </mat-checkbox>\r\n        </mat-card>\r\n        <mat-error *ngIf=\"summaryForm.controls.AgreeToAll.errors && summaryForm.controls.AgreeToAll.touched\"\r\n            class=\"error_color\">Required</mat-error><br />\r\n\r\n        <mat-card>\r\n            <mat-checkbox formControlName=\"receiveNewsletter\">\r\n                <div class=\"checkbox_text\">I agree to receive DZI newsletter</div>\r\n            </mat-checkbox>\r\n        </mat-card>\r\n        <mat-error\r\n            *ngIf=\"summaryForm.controls.receiveNewsletter.errors && summaryForm.controls.receiveNewsletter.touched\"\r\n            class=\"error_color\">Required</mat-error><br />\r\n\r\n        <mat-card>\r\n            <mat-checkbox formControlName=\"generalTerms\">\r\n                <div class=\"checkbox_text\">\r\n                    I agree to the\r\n                    <a routerLink=\"#\" style=\"color:dodgerblue ;\">general terms and conditions</a>\r\n                </div>\r\n            </mat-checkbox>\r\n        </mat-card>\r\n        <mat-error *ngIf=\"summaryForm.controls.generalTerms.errors && summaryForm.controls.generalTerms.touched\"\r\n            class=\"error_color\">required</mat-error><br />\r\n    </form>\r\n    <div fxLayoutAlign.xs=\"center\">\r\n        <button class=\"btn_prop\" mat-raised-button color=\"primary\" [disabled]=\"summaryForm.invalid\" matStepperNext\r\n            (click)=\"saveData()\">\r\n            Continue to payment\r\n        </button>\r\n    </div>\r\n</body>\r\n\r\n</html>"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-abc84b8ad3f4377364d249e516c22784",
            "file": "src/app/components/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tab",
            "styleUrls": [
                "./tab.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "changeTab",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mtplCalculatorStep",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "policyTabToggle",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "switch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "welcomeuser",
                    "defaultValue": "sessionStorage.getItem('welcomename')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tab',\r\n  templateUrl: './tab.component.html',\r\n  styleUrls: ['./tab.component.css']\r\n})\r\nexport class TabComponent implements OnInit {\r\n  welcomeuser = sessionStorage.getItem('welcomename');\r\n  activeTab = 0;\r\n  policyTabToggle = true;\r\n  mtplCalculatorStep;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  changeTab = data => {\r\n    this.policyTabToggle = false;\r\n    this.activeTab = data;\r\n  }\r\n  switch = index => {\r\n    this.activeTab = 0;\r\n    this.mtplCalculatorStep = index;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".intro {\r\n  text-align: center;\r\n  color: white;\r\n  padding: 17px;\r\n  background-color: rgb(8, 56, 95);\r\n  text-transform: uppercase;\r\n  word-spacing: 6px;\r\n  letter-spacing: 1px;\r\n}\r\n",
                    "styleUrl": "./tab.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"intro\"><b>welcome</b> {{ welcomeuser }}</div>\r\n<!-- <button (click)=\"policyTabToggle=!policyTabToggle\">toggle</button> -->\r\n<mat-tab-group mat-align-tabs=\"center\" [(selectedIndex)]=\"activeTab\">\r\n  <mat-tab label=\"MTPL Calculator\">\r\n    <app-mtpl-calculator [stepChange]=\"mtplCalculatorStep\" (NextTabSwitch)=\"changeTab($event)\"></app-mtpl-calculator>\r\n  </mat-tab>\r\n  <mat-tab label=\"Purchase MTPL Policy\" [disabled]=\"policyTabToggle\">\r\n    <app-mtpl-policy (switchTab)=\"switch($event)\"></app-mtpl-policy>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n"
        },
        {
            "name": "VehicleInformationComponent",
            "id": "component-VehicleInformationComponent-21fb82d989a2a2ee84219a4cfba200ec",
            "file": "src/app/components/tab/mtpl-calculator/Steps/vehicle-information/vehicle-information.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-information",
            "styleUrls": [
                "./vehicle-information.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./vehicle-information.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "certificateNo",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "drivingOutsideYesNo",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "purposeSelected",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "registrationNo",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "Submission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 12,
                    "type": "EventEmitter"
                },
                {
                    "name": "Toggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "purposeList",
                    "defaultValue": "['Personal Use', 'Public Use']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "vehicleInfoForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\n@Component({\r\nselector: 'app-vehicle-information',\r\ntemplateUrl: './vehicle-information.component.html',\r\nstyleUrls: ['./vehicle-information.component.css'],\r\n})\r\nexport class VehicleInformationComponent implements OnInit {\r\n@Output() Toggle = new EventEmitter();\r\n@Output() Submission = new EventEmitter<any>();\r\n@Input() registrationNo: string;\r\n@Input() certificateNo: string;\r\n@Input() purposeSelected: string;\r\n@Input() drivingOutsideYesNo: string;\r\nvehicleInfoForm: FormGroup;\r\npurposeList = ['Personal Use', 'Public Use'];\r\nconstructor(private formBuilder: FormBuilder, private commonDataService: CommonDataService,\r\n            private GAService: GoogleAnalyticsService\r\n) {}\r\n// Form field validators\r\nngOnInit(): void {\r\nthis.vehicleInfoForm = this.formBuilder.group({\r\nregistrationNumber: [\r\n'',\r\n[Validators.required, Validators.minLength(8), Validators.maxLength(8)],\r\n],\r\ncertificateNumber: [\r\n'',\r\n[Validators.required, Validators.minLength(9), Validators.maxLength(9)],\r\n],\r\npurpose: ['', Validators.required],\r\nyesNo: ['', Validators.required],\r\n});\r\n}\r\n// on form submit submit function will get call\r\nsubmit = () => {\r\nthis.GAService.event('Next Button clicked', 'Vehicle Infomation', 'Next');\r\nthis.commonDataService.vehicleinfo.next(this.vehicleInfoForm.value);\r\nthis.Submission.emit('Vehicle Information form is submitted!');\r\n}\r\n// On change of form field change() function will get call\r\nchange = () => {\r\nif (this.vehicleInfoForm.valid) {\r\nthis.Toggle.emit(true);\r\nthis.commonDataService.vehicleinfo.next(this.vehicleInfoForm.value);\r\n} else {\r\nthis.Toggle.emit(false);\r\n}\r\n}\r\n\r\nget formsControl() {\r\nreturn this.vehicleInfoForm.controls;\r\n}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* styles form elemnt */\r\nform {\r\n\tmargin: 0 auto;\r\n\twidows: 500px;\r\n}\r\n/* styles next button */\r\n.n {\r\n\tborder-radius: 50px 50px 50px 50px;\r\n\twidth: 8em;\r\n}\r\n/* styles heading */\r\n.header {\r\n\tcolor: rgb(8, 56, 95);\r\n\tfont-family: \"Trebuchet MS\", \"Lucida Sans Unicode\", \"Lucida Grande\",\r\n\t\t\"Lucida Sans\", Arial, sans-serif;\r\n}\r\n@media screen and (max-width: 768px) {\r\n\t.line {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n@media screen and (max-width: 575px) {\r\n\t.btn {\r\n\t\twidth: 250px;\r\n\t\tmargin: auto;\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./vehicle-information.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formsControl": {
                    "name": "formsControl",
                    "getSignature": {
                        "name": "formsControl",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<!-- Heading section -->\r\n<h1 class=\"header\">\r\n\t<strong>Vehicle Information</strong>\r\n</h1>\r\n<!-- Vehivcle information form fields -->\r\n<form [formGroup]=\"vehicleInfoForm\" (submit)=\"submit()\">\r\n\t<br />\r\n\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t<mat-label for=\"registrationNumber\" fxFlex=\"60%\"\r\n\t\t\t>Vehicle Registration Number</mat-label\r\n\t\t>\r\n\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t<input matInput id=\"registrationNumber\" name=\"registrationNumber\" placeholder=\"XX0000XX\" formControlName=\"registrationNumber\" (change)=\"change()\" [(ngModel)]=\"registrationNo\"\r\n\t\t\t/>\r\n\t\t\t<mat-error *ngIf=\"formsControl.registrationNumber.errors\">\r\n\t\t\t\t<div *ngIf=\"formsControl.registrationNumber.errors?.required\">\r\n\t\t\t\t\tVehicle Registartion Number is required\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tformsControl.registrationNumber.errors?.minlength || formsControl.registrationNumber.errors?.maxlength\r\n\t\t\t\t\t\"\r\n\t\t\t\t>\r\n\t\t\t\t\tVehicle Registartion Number Should be 8 characters\r\n\t\t\t\t</div>\r\n\t\t\t</mat-error>\r\n\t\t</mat-form-field>\r\n\t</div>\r\n\r\n\t<mat-divider></mat-divider><br />\r\n\r\n\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t<mat-label for=\"certificateNumber\" fxFlex=\"60%\">\r\n\t\t\tVehicle Certificate Number<br />\r\n\t\t\t<a routerlink=\"\"><u>Where can I find this number?</u></a></mat-label\r\n\t\t>\r\n\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t<input\r\n\t\t\t\tmatInput id=\"certificateNumber\" name=\"certificateNumber\" placeholder=\"000000000\" formControlName=\"certificateNumber\" (change)=\"change()\" [(ngModel)]=\"certificateNo\"\r\n\t\t\t/>\r\n\t\t\t<mat-error *ngIf=\"formsControl.certificateNumber.errors\">\r\n\t\t\t\t<div *ngIf=\"formsControl.certificateNumber.errors?.required\">\r\n\t\t\t\t\tVehicle Certificate Number is required\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tformsControl.certificateNumber.errors?.minlength || formsControl.certificateNumber.errors?.maxlength\r\n\t\t\t\t\t\"\r\n\t\t\t\t>\r\n\t\t\t\t\tVehicle Certificate Number Should be 9 characters\r\n\t\t\t\t</div>\r\n\t\t\t</mat-error>\r\n\t\t</mat-form-field>\r\n\t</div>\r\n\r\n\t<mat-divider></mat-divider><br />\r\n\r\n\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t<mat-label for=\"purpose\" fxFlex=\"60%\">\r\n\t\t\tWhat purpose does this vehicle serve?</mat-label\r\n\t\t>\r\n\r\n\t\t<mat-form-field fxFlex=\"40%\" appearance=\"outline\">\r\n\t\t\t<mat-select id=\"purpose\" name=\"purpose\" formControlName=\"purpose\" placeholder=\"--SELECT--\" (selectionChange)=\"change()\" [(ngModel)]=\"purposeSelected\"\r\n\t\t\t>\r\n\t\t\t\t<mat-option selected disabled value=\"\">--SELECT--</mat-option>\r\n\t\t\t\t<mat-option *ngFor=\"let p of purposeList\" value=\"{{ p }}\">{{\r\n\t\t\t\t\tp\r\n\t\t\t\t}}</mat-option>\r\n\t\t\t</mat-select>\r\n\t\t\t<mat-error *ngIf=\"formsControl.purpose.errors\">\r\n\t\t\t\t<div *ngIf=\"formsControl.purpose.errors?.required\">\r\n\t\t\t\t\tPlease select what purpose does this vehicle serve\r\n\t\t\t\t</div>\r\n\t\t\t</mat-error>\r\n\t\t</mat-form-field>\r\n\t</div>\r\n\t<br />\r\n\t<mat-divider></mat-divider>\r\n\t<br />\r\n\r\n\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t<div fxFlex=\"60%\">\r\n\t\t\t<mat-label>\r\n\t\t\t\tAre you Driving outside Bulgarian territory with this vehicle for more than\r\n\t\t\t\t60 days?\r\n\t\t\t</mat-label>\r\n\t\t</div>\r\n\t\t<div fxFlex=\"40%\">\r\n\t\t\t<mat-radio-group color=\"primary\" formControlName=\"yesNo\" (change)=\"change()\">\r\n\t\t\t\t<mat-radio-button id=\"DrivingYes\" name=\"yesNo\" value=\"Yes\">\r\n\t\t\t\t\t&nbsp; Yes &nbsp;&nbsp;</mat-radio-button\r\n\t\t\t\t>\r\n\t\t\t\t<mat-radio-button id=\"DrivingNo\" name=\"yesNo\" value=\"No\">\r\n\t\t\t\t\t&nbsp; No\r\n\t\t\t\t</mat-radio-button>\r\n\t\t\t</mat-radio-group>\r\n\t\t</div>\r\n\t</div>\r\n\t<br />\r\n\t<mat-divider></mat-divider>\r\n\t<br />\r\n\r\n\t<button mat-flat-button color=\"primary\" class=\"n\" type=\"submit\" matStepperNext [disabled]=\"!vehicleInfoForm.valid\"\r\n\t>\r\n\t\tNext\r\n\t</button>\r\n</form>\r\n"
        },
        {
            "name": "VehicleOwnerComponent",
            "id": "component-VehicleOwnerComponent-e26b926acd671577d069b922099859fa",
            "file": "src/app/components/tab/mtpl-policy/Steps/vehicle-owner/vehicle-owner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vehicle-owner",
            "styleUrls": [
                "./vehicle-owner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./vehicle-owner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Vappartment",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "Vblock",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "Vcitizen",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "Vcity",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "Vdob",
                    "line": 29,
                    "type": "Date"
                },
                {
                    "name": "Ventrance",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "Vfirstname",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "Vfirstnameeng",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "Vlastname",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "Vlastnameeng",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "Vlnch",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "VNo",
                    "line": 33,
                    "type": "string"
                },
                {
                    "name": "Vowner",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "Vpincode",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "Vstreet",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "Vsurname",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "Vsurnameeng",
                    "line": 27,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "OnSubmission",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "OnToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "button",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "change",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "cities",
                    "defaultValue": "['Hyderabad', 'Mumbai', 'Pune', 'Chennai', 'Bangalore', 'Goa', 'Maharashtra',\r\n]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "citizens",
                    "defaultValue": "['Indian', 'American', 'African']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "Details",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "gaTrigger",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "selectedLink",
                    "defaultValue": "'Yes'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "toggle",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "setradio",
                    "args": [
                        {
                            "name": "e",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\r\nimport { CommonDataService } from '../../../../shared/common-data-service/common-data.service';\r\n\r\n@Component({\r\nselector: 'app-vehicle-owner',\r\ntemplateUrl: './vehicle-owner.component.html',\r\nstyleUrls: ['./vehicle-owner.component.css'],\r\n})\r\nexport class VehicleOwnerComponent implements OnInit {\r\nconstructor(private formBuilder: FormBuilder, private GAService: GoogleAnalyticsService,\r\n            private commonDataService: CommonDataService\r\n) {}\r\n\r\n@Output() OnToggle = new EventEmitter();\r\n@Output() OnSubmission = new EventEmitter<any>();\r\n\r\n// Input fields\r\n@Input() Vowner: string;\r\n@Input() Vlnch: string;\r\n@Input() Vfirstname: string;\r\n@Input() Vlastname: string;\r\n@Input() Vsurname: string;\r\n@Input() Vfirstnameeng: string;\r\n@Input() Vlastnameeng: string;\r\n@Input() Vsurnameeng: string;\r\n@Input() Vcitizen: string;\r\n@Input() Vdob: Date;\r\n@Input() Vcity: string;\r\n@Input() Vpincode: string;\r\n@Input() Vstreet: string;\r\n@Input() VNo: string;\r\n@Input() Vblock: string;\r\n@Input() Ventrance: string;\r\n@Input() Vappartment: string;\r\n\r\nDetails: FormGroup;\r\ncitizens = ['Indian', 'American', 'African'];\r\ncities = ['Hyderabad', 'Mumbai', 'Pune', 'Chennai', 'Bangalore', 'Goa', 'Maharashtra',\r\n];\r\nprivate selectedLink = 'Yes';\r\nbutton = false;\r\n\r\nngOnInit(): void {\r\nthis.Details = this.formBuilder.group({\r\nlnch: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]],\r\nfullname: this.formBuilder.group({\r\nfirstname: [\r\n'',\r\n[\r\nValidators.required,\r\nValidators.pattern('^[a-zA-Z]*$'),\r\nValidators.maxLength(20),\r\n],\r\n],\r\nlastname: ['', Validators.pattern('^[a-zA-Z]*$')],\r\nsurname: [\r\n'',\r\n[\r\nValidators.required,\r\nValidators.pattern('^[a-zA-Z]*$'),\r\nValidators.maxLength(20),\r\n],\r\n],\r\n}),\r\nfullnameeng: this.formBuilder.group({\r\nfirstnameeng: [\r\n'',\r\n[\r\nValidators.required,\r\nValidators.pattern('^[a-zA-Z]*$'),\r\nValidators.maxLength(20),\r\n],\r\n],\r\nlastnameeng: ['', Validators.pattern('^[a-zA-Z]*$')],\r\nsurnameeng: [\r\n'',\r\n[\r\nValidators.required,\r\nValidators.pattern('^[a-zA-Z]*$'),\r\nValidators.maxLength(20),\r\n],\r\n],\r\n}),\r\ncitizen: ['', Validators.required],\r\nbirth: ['', Validators.required],\r\ncity: ['', Validators.required],\r\npincode: ['', Validators.required],\r\nstreet: ['', Validators.required],\r\nNo: ['', Validators.required],\r\nblock: [''],\r\nentrance: [''],\r\nappartment: [''],\r\n});\r\n}\r\n\r\nsetradio(e: string): void {\r\nthis.selectedLink = e;\r\n}\r\n\r\nisSelected(name: string): boolean {\r\nif (!this.selectedLink) {\r\nreturn false;\r\n}\r\n\r\nreturn this.selectedLink === name;\r\n}\r\n\r\nsubmit = () => {\r\nthis.GAService.event('Next Button clicked', 'Vehicle Owner', 'Next');\r\nthis.commonDataService.vehicleownerinformation.next(this.Details.value);\r\nthis.OnSubmission.emit('Vehicle owner information form is submitted!');\r\n}\r\ngaTrigger = () => {\r\nthis.GAService.event('Next Button clicked', 'Vehicle Owner', 'Next');\r\n}\r\nchange = () => {\r\nif (this.Details.valid) {\r\nthis.OnToggle.emit(true);\r\nthis.commonDataService.vehicleownerinformation.next(this.Details.value);\r\n} else {\r\nthis.OnToggle.emit(false);\r\n}\r\n}\r\ntoggle = (data) => {\r\nif (data) {\r\nthis.OnToggle.emit(true);\r\nlet personalinformation;\r\nthis.commonDataService.personalinformation.subscribe(\r\n(data1) => (personalinformation = data1)\r\n);\r\nlet contactinformation;\r\nthis.commonDataService.contactinformation.subscribe(\r\n(data1) => (contactinformation = data1)\r\n);\r\n\r\nconst vehicleOwnerData = {\r\nlnch: personalinformation.lnch,\r\nfullname: {\r\nfirstname: personalinformation.fullname.firstname,\r\nlastname: personalinformation.fullname.lastname,\r\nsurname: personalinformation.fullname.surname,\r\n},\r\nfullnameeng: {\r\nfirstnameeng: personalinformation.fullnameeng.firstnameeng,\r\nlastnameeng: personalinformation.fullnameeng.lastnameeng,\r\nsurnameeng: personalinformation.fullnameeng.surnameeng,\r\n},\r\ncitizen: personalinformation.citizen,\r\nbirth: personalinformation.birth,\r\ncity: contactinformation.city,\r\npincode: contactinformation.pincode,\r\nstreet: contactinformation.street,\r\nNo: contactinformation.No,\r\nblock: contactinformation.block,\r\nentrance: contactinformation.entrance,\r\nappartment: contactinformation.appartment,\r\n};\r\nthis.commonDataService.vehicleownerinformation.next(vehicleOwnerData);\r\nthis.button = true;\r\n} else {\r\nthis.change();\r\n}\r\n}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* styles label with color and font-family*/\r\n.label {\r\n  color: rgb(8, 56, 95);\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\n/* Styles image with width */\r\n.user-key {\r\n  width: 40px;  \r\n}\r\n\r\n/* styles heading elements */\r\nh1 {\r\n  color: rgb(8, 56, 95);\r\n  font-weight: bold;\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n}\r\n\r\n/* styles warning section */\r\n.panel {\r\n  border-width: thin;\r\n  border-style: solid;\r\n  border-color: yellow;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* styles mat-error with red color */\r\n.error {\r\n  color: red;\r\n}\r\n\r\n/* styles line divider */\r\n.line{\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.rounded{\r\n  border: radius 0.5;\r\n}\r\n\r\n@media screen and (max-width: 800px) {\r\n  .line {\r\n    display: none;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 575px) {\r\n  .nextbtn {\r\n    width: 250px;\r\n    margin: auto;\r\n    display: block;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1090px) {\r\n  .col-lg-4 {\r\n    padding: 4px;\r\n  }\r\n}",
                    "styleUrl": "./vehicle-owner.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService"
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "GAService",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonDataService",
                        "type": "CommonDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Vehicle Owner</h1>\r\n<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t<mat-label fxFlex=\"60%\">Are you the owner of this Vehicle</mat-label>\r\n\t<!-- Radio buttons to select are you owner of vehicle -->\r\n\t<mat-radio-group fxFlex=\"40%\">\r\n\t\t<mat-radio-button id=\"Radios1\" name=\"owner\" value=\"Yes\" [checked]=\"Vowner === 'Yes'\" (click)=\"setradio('Yes')\" (change)=\"toggle(true)\">Yes</mat-radio-button\r\n\t\t>\r\n\t\t<mat-radio-button id=\"Radios2\" name=\"owner\" value=\"No\" [checked]=\"Vowner === 'No'\" (click)=\"setradio('No')\" (change)=\"toggle(false)\">No</mat-radio-button\r\n\t\t>\r\n\t</mat-radio-group>\r\n</div>\r\n<!-- If yes is selected next button will be enable -->\r\n<mat-divider></mat-divider>\r\n<div *ngIf=\"isSelected('Yes')\">\r\n\t<br />\r\n\t<button mat-raised-button matStepperNext color=\"primary\" class=\"rounded\" id=\"ownerbtn1\" name=\"ownerbtn1\" (click)=\"gaTrigger()\" [disabled]=\"!button\"\r\n\t>\r\n\t\tNext\r\n\t</button>\r\n</div>\r\n<!-- If no select you have to fill given form fields  -->\r\n<div *ngIf=\"isSelected('No')\">\r\n\t<form [formGroup]=\"Details\" (ngSubmit)=\"submit()\">\r\n\t\t<h2 class=\"label\"><b>Vehicle Owner Details</b></h2>\r\n\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t\t<mat-label for=\"lnch\" fxFlex=\"60%\" class=\"label\"\r\n\t\t\t\t>Enter your EGN/EIK/LNCH</mat-label\r\n\t\t\t>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t\t<mat-label>LNCH</mat-label>\r\n\t\t\t\t<input matInput id=\"lnch\" name=\"lnch\" placeholder=\"Enter your Number\" formControlName=\"lnch\" (change)=\"change()\" [(ngModel)]=\"Vlnch\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.lnch.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.lnch.dirty || Details.controls.lnch.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.lnch.hasError('pattern') &&\r\n\t\t\t\t\t\t(Details.controls.lnch.dirty || Details.controls.lnch.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>Only 10 digit numerical value allowed</mat-error\r\n\t\t\t\t>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<mat-divider class=\"line\"></mat-divider>\r\n\t\t<div formGroupName=\"fullname\">\r\n\t\t\t<mat-label class=\"label\">Full Name</mat-label>\r\n\t\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t\t<mat-label>First Name</mat-label>\r\n\t\t\t\t\t<input matInput id=\"firstname\" name=\"firstname\" placeholder=\"Enter firstname\" formControlName=\"firstname\" [(ngModel)]=\"Vfirstname\" (change)=\"change()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('firstname').hasError('required') && (Details.get('fullname').get('firstname').dirty ||Details.get('fullname').get('firstname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('firstname').hasError('pattern') && (Details.get('fullname').get('firstname').dirty || Details.get('fullname').get('firstname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Only alphabets allowed</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('firstname').hasError('maxlength') && (Details.get('fullname').get('firstname').dirty || Details.get('fullname').get('firstname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Max length can be 20 characters</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t\t<mat-label>Last Name</mat-label>\r\n\t\t\t\t\t<input matInput id=\"lastname\" name=\"lastname\" placeholder=\"Enter lastname\" formControlName=\"lastname\" [(ngModel)]=\"Vlastname\" (change)=\"change()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('lastname').hasError('pattern') && (Details.get('fullname').get('lastname').dirty || Details.get('fullname').get('lastname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Only alphabets allowed</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t\t<mat-label>Sur Name</mat-label>\r\n\t\t\t\t\t<input matInput [(ngModel)]=\"Vsurname\" id=\"surname\" placeholder=\"Enter lastname\" formControlName=\"surname\" name=\"suname\" (change)=\"change()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('surname').hasError('required') && (Details.get('fullname').get('surname').dirty || Details.get('fullname').get('surname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('surname').hasError('pattern') &&\r\n\t\t\t\t\t\t\t(Details.get('fullname').get('surname').dirty || Details.get('fullname').get('surname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Only alphabets allowed</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullname').get('surname').hasError('maxlength') &&\r\n\t\t\t\t\t\t\t(Details.get('fullname').get('surname').dirty || Details.get('fullname').get('surname').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Max length can be 20 characters</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<mat-divider class=\"line\"></mat-divider>\r\n\t\t<div formGroupName=\"fullnameeng\">\r\n\t\t\t<mat-label class=\"label\">Full Name in English</mat-label><br />\r\n\t\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t\t<mat-label>First Name</mat-label>\r\n\t\t\t\t\t<input matInput id=\"firstnameeng\" name=\"firstnameeng\" placeholder=\"Enter firstname\" formControlName=\"firstnameeng\" [(ngModel)]=\"Vfirstnameeng\" (change)=\"change()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullnameeng').get('firstnameeng').hasError('required') && (Details.get('fullnameeng').get('firstnameeng').dirty || Details.get('fullnameeng').get('firstnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullnameeng').get('firstnameeng').hasError('pattern') &&\r\n\t\t\t\t\t\t\t(Details.get('fullnameeng').get('firstnameeng').dirty || Details.get('fullnameeng').get('firstnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Only alphabets allowed</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullnameeng').get('firstnameeng').hasError('maxlength') && (Details.get('fullnameeng').get('firstnameeng').dirty || Details.get('fullnameeng').get('firstnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Max length can be 20 characters</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t\t<mat-label>Last Name</mat-label>\r\n\t\t\t\t\t<input matInput id=\"lastnameeng\" name=\"lastnameeng\" placeholder=\"Enter lastname\" formControlName=\"lastnameeng\" [(ngModel)]=\"Vlastnameeng\" (change)=\"change()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\t\tDetails.get('fullnameeng').get('lastnameeng').hasError('pattern') &&\r\n\t\t\t\t\t\t\t(Details.get('fullnameeng').get('lastnameeng').dirty || Details.get('fullnameeng').get('lastnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Only alphabets allowed</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t\t<input matInput [(ngModel)]=\"Vsurnameeng\" id=\"surnameeng\" placeholder=\"Enter surname\" formControlName=\"surnameeng\" name=\"sunameeng\" (change)=\"change()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullnameeng').get('surnameeng').hasError('required') &&\r\n\t\t\t\t\t\t\t(Details.get('fullnameeng').get('surnameeng').dirty || Details.get('fullnameeng').get('surnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullnameeng').get('surnameeng').hasError('pattern') &&\r\n\t\t\t\t\t\t\t(Details.get('fullnameeng').get('surnameeng').dirty || Details.get('fullnameeng').get('surnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Only alphabets allowed</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t*ngIf=\"Details.get('fullnameeng').get('surnameeng').hasError('maxlength') &&\r\n\t\t\t\t\t\t\t(Details.get('fullnameeng').get('surnameeng').dirty || Details.get('fullnameeng').get('surnameeng').touched)\r\n\t\t\t\t\t\t\"\r\n\t\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t\t>Max length can be 20 characters</mat-error\r\n\t\t\t\t\t>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"panel\" fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n\t\t\t<div fxFlex=\"10%\">\r\n\t\t\t\t<img\r\n\t\t\t\t\tclass=\"user-key\"\r\n\t\t\t\t\tsrc=\"../../assets/excl.jpg\"\r\n\t\t\t\t\talt=\"warning image with yellow background\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div fxFlex=\"80%\">\r\n\t\t\t\tPlease compare data in latin with data in vehicle registration certificate\r\n\t\t\t\tor identity document.Data will be used for printout of Green Card\r\n\t\t\t\tCertificate.\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t\t<mat-label for=\"citizen\" fxFlex=\"60%\" class=\"label\">Citizenship</mat-label>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t\t<mat-label>Citizenship</mat-label>\r\n\t\t\t\t<mat-select id=\"citizen\" name=\"citizen\" formControlName=\"citizen\" [(ngModel)]=\"Vcitizen\" (change)=\"change()\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<mat-option selected disabled value=\"\">--SELECT--</mat-option>\r\n\t\t\t\t\t<mat-option *ngFor=\"let c of citizens\" [value]=\"c\">{{ c }}</mat-option>\r\n\t\t\t\t</mat-select>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.citizen.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.citizen.dirty || Details.controls.citizen.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>Please select your Citizenship</mat-error\r\n\t\t\t\t>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<mat-divider class=\"line\"></mat-divider>\r\n\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\">\r\n\t\t\t<label for=\"birth\" fxFlex=\"60%\" class=\"label\">Birth Date</label>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"40%\">\r\n\t\t\t\t<mat-label>Birth Date</mat-label>\r\n\t\t\t\t<input matInput [matDatepicker]=\"picker\" id=\"birth\" name=\"birth\" placeholder=\"Enter Birth date\" formControlName=\"birth\" (change)=\"change()\" [ngModel]=\"Vdob | date: 'yyyy-MM-dd'\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n\t\t\t\t<mat-datepicker #picker></mat-datepicker>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.birth.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.birth.dirty || Details.controls.birth.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>Please select your birth date\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<mat-divider class=\"h-divider\"> </mat-divider>\r\n\t\t<h2 class=\"label\">\r\n\t\t\t<b>Contact Information</b>\r\n\t\t</h2>\r\n\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\">\r\n\t\t\t<mat-label for=\"city\" fxFlex=\"40%\" class=\"label\">City</mat-label>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t<mat-label>City</mat-label>\r\n\t\t\t\t<mat-select id=\"sel1\" name=\"city\" formControlName=\"city\" [(ngModel)]=\"Vcity\" (change)=\"change()\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<mat-option selected disabled value=\"\">--select--</mat-option>\r\n\t\t\t\t\t<mat-option *ngFor=\"let city of cities\" [value]=\"city\">{{\r\n\t\t\t\t\t\tcity\r\n\t\t\t\t\t}}</mat-option>\r\n\t\t\t\t</mat-select>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.city.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.city.dirty || Details.controls.city.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20%\">\r\n\t\t\t\t<input matInput [(ngModel)]=\"Vpincode\" placeholder=\"1000\" (change)=\"change()\" formControlName=\"pincode\" id=\"pincode\" name=\"pincode\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.pincode.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.pincode.dirty || Details.controls.pincode.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>This field is mandatory</mat-error\r\n\t\t\t\t>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<mat-divider class=\"line\"></mat-divider>\r\n\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\">\r\n\t\t\t<mat-label for=\"s&n\" fxFlex=\"40%\" class=\"label\">Street & Number </mat-label>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30%\">\r\n\t\t\t\t<mat-label>Street</mat-label>\r\n\t\t\t\t<input matInput [(ngModel)]=\"Vstreet\" formControlName=\"street\" (change)=\"change()\" id=\"street\" name=\"street\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.street.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.street.dirty || Details.controls.street.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>Please select your street</mat-error\r\n\t\t\t\t>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20%\">\r\n\t\t\t\t<mat-label>Number</mat-label>\r\n\t\t\t\t<input matInput [(ngModel)]=\"VNo\" formControlName=\"No\" (change)=\"change()\" id=\"No\" name=\"No\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-error\r\n\t\t\t\t\t*ngIf=\"\r\n\t\t\t\t\t\tDetails.controls.No.hasError('required') &&\r\n\t\t\t\t\t\t(Details.controls.No.dirty || Details.controls.No.touched)\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"error\"\r\n\t\t\t\t\t>Please enter your House NO</mat-error\r\n\t\t\t\t>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<mat-divider></mat-divider>\r\n\t\t<div fxLayout=\"row\" fxLayout.lt-lg=\"column\" fxLayoutAlign=\"space-between\">\r\n\t\t\t<mat-label for=\"be&a\" fxFlex=\"40%\" class=\"label\"\r\n\t\t\t\t>Block Entrance & Apartment\r\n\t\t\t</mat-label>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"15%\">\r\n\t\t\t\t<input matInput id=\"block\" name=\"block\" [(ngModel)]=\"Vblock\" (change)=\"change()\" formControlName=\"block\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-hint>Optional</mat-hint>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"15%\">\r\n\t\t\t\t<input matInput id=\"entrance\" name=\"entrance\" [(ngModel)]=\"Ventrance\" (change)=\"change()\" formControlName=\"entrance\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-hint>Optional</mat-hint>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"15%\">\r\n\t\t\t\t<input matInput id=\"appartment\" name=\"appartment\" [(ngModel)]=\"Vappartment\" (change)=\"change()\" formControlName=\"appartment\"\r\n\t\t\t\t/>\r\n\t\t\t\t<mat-hint>Optional</mat-hint>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<button mat-raised-button matStepperNext color=\"primary\" type=\"submit\" class=\"rounded\" id=\"ownerbtn2\" name=\"ownerbtn2\" [disabled]=\"!Details.valid\"\r\n\t\t>\r\n\t\t\tNext\r\n\t\t</button>\r\n\t</form>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdditionalCoversComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ContactDetailsComponent"
                        },
                        {
                            "name": "DeliveryComponent"
                        },
                        {
                            "name": "InstallmentComponent"
                        },
                        {
                            "name": "InsuringPartyComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MTPLCalculatorComponent"
                        },
                        {
                            "name": "MTPLPolicyComponent"
                        },
                        {
                            "name": "OrdinalPipe"
                        },
                        {
                            "name": "PaymentComponent"
                        },
                        {
                            "name": "PersonalDetailsComponent"
                        },
                        {
                            "name": "PolicyDetailsComponent"
                        },
                        {
                            "name": "ProgressSpinnerComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        },
                        {
                            "name": "SummaryComponent"
                        },
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "VehicleInformationComponent"
                        },
                        {
                            "name": "VehicleOwnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: LoginComponent,\r\n  props: {\r\n    \r\n  }\r\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/stories/login.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: LoginComponent,\r\n  props: {\r\n    \r\n  }\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "signIn",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "tab",
                        "component": "TabComponent",
                        "canActivate": [
                            "LoggedInGuardGuard"
                        ]
                    },
                    {
                        "path": "signUp",
                        "component": "SignUpComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/signIn",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/_guards/logged-in-guard.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedInGuardGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/common-data-service/common-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommonDataService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/ordinal-pipe/ordinal.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "OrdinalPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/progress-spinner/progress-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/shared/provinces-service/provinces.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProvincesService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sign-up/sign-up.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignUpService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/Steps/additional-covers/additional-covers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdditionalCoversComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/Steps/installment/installment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InstallmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/Steps/installment/installment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InstallmentService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/Steps/insuring-party/insuring-party.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InsuringPartyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/Steps/policy-details/policy-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PolicyDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/Steps/vehicle-information/vehicle-information.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleInformationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/mtpl-calculator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MTPLCalculatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-calculator/mtpl-calculator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MtplCalculatorService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/Steps/contact-details/contact-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/Steps/delivery/delivery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeliveryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/Steps/payment/payment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/Steps/personal-details/personal-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonalDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/Steps/summary/summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/Steps/vehicle-owner/vehicle-owner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VehicleOwnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/mtpl-policy.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MTPLPolicyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/mtpl-policy/mtpl-policy.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MtplPolicyService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}